{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from \"./constants\";\nimport { GesturePropError } from \"./Errors\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(FlingGestureHandler);\n\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FlingGestureHandler, [{\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_RIGHT);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_LEFT);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_UP);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return Hammer.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return Hammer.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, recognizer, _ref2) {\n      var minPointers = _ref.minPointers,\n          maxPointers = _ref.maxPointers,\n          numberOfPointers = _ref.numberOfPointers,\n          maxDist = _ref.maxDist,\n          maxDeltaX = _ref.maxDeltaX,\n          maxDeltaY = _ref.maxDeltaY,\n          maxDistSq = _ref.maxDistSq,\n          shouldCancelWhenOutside = _ref.shouldCancelWhenOutside;\n\n      var pointerLength = _ref2.maxPointers,\n          dx = _ref2.deltaX,\n          dy = _ref2.deltaY,\n          props = _objectWithoutProperties(_ref2, [\"maxPointers\", \"deltaX\", \"deltaY\"]);\n\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = _objectWithoutProperties(_ref3, [\"numberOfPointers\", \"direction\"]);\n\n      if (isnan(direction) || typeof direction !== 'number') {\n        throw new GesturePropError('direction', direction, 'number');\n      }\n\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Swipe;\n    }\n  }]);\n\n  return FlingGestureHandler;\n}(DraggingGestureHandler);\n\nexport default FlingGestureHandler;","map":{"version":3,"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","ev","setTimeout","cancelEvent","gesture","hammer","get","name","options","enable","onStart","pointers","config","numberOfPointers","direction","getDirection","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","recognizer","minPointers","maxPointers","maxDist","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","pointerLength","dx","deltaX","dy","deltaY","props","validPointerCount","failed","success","Swipe"],"sources":["D:/GitHub/mern-stack-ecommerce/easy-shop/node_modules/react-native-gesture-handler/web/FlingGestureHandler.js"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport { Direction } from './constants';\r\nimport { GesturePropError } from './Errors';\r\nimport DraggingGestureHandler from './DraggingGestureHandler';\r\nimport { isnan } from './utils';\r\n\r\nclass FlingGestureHandler extends DraggingGestureHandler {\r\n  get name() {\r\n    return 'swipe';\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    return Hammer.Swipe;\r\n  }\r\n\r\n  onGestureActivated(event) {\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_MOVE,\r\n      isFinal: false,\r\n      isFirst: true,\r\n    });\r\n    this.isGestureRunning = false;\r\n    this.hasGestureFailed = false;\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_END,\r\n      isFinal: true,\r\n    });\r\n  }\r\n\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n    if (this.hasGestureFailed) {\r\n      return;\r\n    }\r\n    // Hammer doesn't send a `cancel` event for taps.\r\n    // Manually fail the event.\r\n    if (ev.isFinal) {\r\n      setTimeout(() => {\r\n        if (this.isGestureRunning) {\r\n          this.cancelEvent(ev);\r\n        }\r\n      });\r\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\r\n      // Tap Gesture start event\r\n      const gesture = this.hammer.get(this.name);\r\n      if (gesture.options.enable(gesture, ev)) {\r\n        this.onStart(ev);\r\n        this.sendEvent(ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      pointers: this.config.numberOfPointers,\r\n      direction: this.getDirection(),\r\n    };\r\n  }\r\n\r\n  getTargetDirections(direction) {\r\n    const directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_RIGHT);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_LEFT);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_UP);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_DOWN);\r\n    }\r\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\r\n    return directions;\r\n  }\r\n\r\n  getDirection() {\r\n    const { direction } = this.getConfig();\r\n\r\n    let directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    directions = [...new Set(directions)];\r\n\r\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\r\n    if (directions.length === 1) return directions[0];\r\n    return Hammer.DIRECTION_ALL;\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    {\r\n      minPointers,\r\n      maxPointers,\r\n      numberOfPointers,\r\n      maxDist,\r\n      maxDeltaX,\r\n      maxDeltaY,\r\n      maxDistSq,\r\n      shouldCancelWhenOutside,\r\n    },\r\n    recognizer,\r\n    { maxPointers: pointerLength, deltaX: dx, deltaY: dy, ...props }\r\n  ) {\r\n    const validPointerCount = pointerLength === numberOfPointers;\r\n    if (!validPointerCount && this.isGestureRunning) {\r\n      return { failed: true };\r\n    }\r\n    return { success: validPointerCount };\r\n  }\r\n\r\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\r\n    if (isnan(direction) || typeof direction !== 'number') {\r\n      throw new GesturePropError('direction', direction, 'number');\r\n    }\r\n    return super.updateGestureConfig({\r\n      numberOfPointers,\r\n      direction,\r\n      ...props,\r\n    });\r\n  }\r\n}\r\n\r\nexport default FlingGestureHandler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}