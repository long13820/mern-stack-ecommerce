{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\mern-stack-ecommerce\\\\easy-shop\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeRow.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar DEFAULT_PREVIEW_OPEN_DELAY = 700;\nvar PREVIEW_CLOSE_DELAY = 300;\nvar MAX_VELOCITY_CONTRIBUTION = 5;\nvar SCROLL_LOCK_MILLISECONDS = 300;\n\nvar SwipeRow = function (_Component) {\n  _inherits(SwipeRow, _Component);\n\n  var _super = _createSuper(SwipeRow);\n\n  function SwipeRow(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeRow);\n\n    _this = _super.call(this, props);\n\n    _this.ensureScrollEnabled = function () {\n      if (!_this.parentScrollEnabled) {\n        _this.parentScrollEnabled = true;\n        _this.props.setScrollEnabled && _this.props.setScrollEnabled(true);\n      }\n    };\n\n    _this.combinedOnPress = function () {\n      var onPress = _this.props.children[1].props.onPress;\n\n      _this.onRowPress();\n\n      onPress && onPress.apply(void 0, arguments);\n    };\n\n    _this.isOpen = false;\n    _this.leftActionActivated = false;\n    _this.rightActionActivated = false;\n    _this.previousTrackedTranslateX = 0;\n    _this.currentTranslateX = 0;\n    _this.previousTrackedDirection = null;\n    _this.horizontalSwipeGestureBegan = false;\n    _this.swipeInitialX = null;\n    _this.parentScrollEnabled = true;\n    _this.ranPreview = false;\n    _this._ensureScrollEnabledTimer = null;\n    _this.isForceClosing = false;\n    _this.state = {\n      leftActionActivated: false,\n      rightActionActivated: false,\n      leftActionState: _this.props.initialLeftActionState || false,\n      rightActionState: _this.props.initialRightActionState || false,\n      previewRepeatInterval: null,\n      timeBetweenPreviewRepeats: null,\n      dimensionsSet: false,\n      hiddenHeight: _this.props.disableHiddenLayoutCalculation ? '100%' : 0,\n      hiddenWidth: _this.props.disableHiddenLayoutCalculation ? '100%' : 0\n    };\n    _this._translateX = new Animated.Value(0);\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {\n        return _this.handleOnMoveShouldSetPanResponder(e, gs);\n      },\n      onPanResponderMove: function onPanResponderMove(e, gs) {\n        return _this.handlePanResponderMove(e, gs);\n      },\n      onPanResponderRelease: function onPanResponderRelease(e, gs) {\n        return _this.handlePanResponderRelease(e, gs);\n      },\n      onPanResponderTerminate: function onPanResponderTerminate(e, gs) {\n        return _this.handlePanResponderEnd(e, gs);\n      },\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n        return false;\n      }\n    });\n\n    _this._translateX.addListener(function (_ref) {\n      var value = _ref.value;\n      _this.currentTranslateX = value;\n\n      if (_this.props.onSwipeValueChange) {\n        var direction = _this.previousTrackedDirection;\n\n        if (value !== _this.previousTrackedTranslateX && Math.abs(value - _this.previousTrackedTranslateX) > 0.5) {\n          direction = value > _this.previousTrackedTranslateX ? 'right' : 'left';\n        }\n\n        _this.props.onSwipeValueChange && _this.props.onSwipeValueChange({\n          isOpen: _this.isOpen,\n          direction: direction,\n          value: value,\n          key: _this.props.swipeKey\n        });\n        _this.previousTrackedTranslateX = value;\n        _this.previousTrackedDirection = direction;\n      }\n    });\n\n    if (_this.props.forceCloseToRightThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref2) {\n        var value = _ref2.value;\n\n        if (!_this.isForceClosing && Dimensions.get('window').width + value < _this.props.forceCloseToRightThreshold) {\n          _this.isForceClosing = true;\n\n          _this.forceCloseRow('right');\n\n          if (_this.props.onForceCloseToRight) {\n            _this.props.onForceCloseToRight();\n          }\n        }\n      });\n    }\n\n    if (_this.props.forceCloseToLeftThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref3) {\n        var value = _ref3.value;\n\n        if (!_this.isForceClosing && Dimensions.get('window').width - value < _this.props.forceCloseToLeftThreshold) {\n          _this.isForceClosing = true;\n\n          _this.forceCloseRow('left');\n\n          if (_this.props.onForceCloseToLeft) {\n            _this.props.onForceCloseToLeft();\n          }\n        }\n      });\n    }\n\n    if (_this.props.onLeftActionStatusChange && _this.props.leftActivationValue && _this.props.leftActivationValue > 0) {\n      _this._translateX.addListener(function (_ref4) {\n        var value = _ref4.value;\n        var absValue = Math.abs(value);\n        var isActivated = absValue > _this.props.leftActivationValue;\n\n        if (_this.leftActionActivated !== isActivated && value > 0) {\n          _this.props.onLeftActionStatusChange({\n            isActivated: isActivated,\n            value: value,\n            key: _this.props.swipeKey\n          });\n\n          _this.leftActionActivated = isActivated;\n\n          _this.setState({\n            leftActionActivated: isActivated\n          });\n        }\n      });\n    }\n\n    if (_this.props.onRightActionStatusChange && _this.props.rightActivationValue && _this.props.rightActivationValue < 0) {\n      _this._translateX.addListener(function (_ref5) {\n        var value = _ref5.value;\n        var absValue = Math.abs(value);\n        var isActivated = absValue > Math.abs(_this.props.rightActivationValue);\n\n        if (_this.rightActionActivated !== isActivated && value < 0) {\n          _this.props.onRightActionStatusChange({\n            isActivated: isActivated,\n            value: value,\n            key: _this.props.swipeKey\n          });\n\n          _this.rightActionActivated = isActivated;\n\n          _this.setState({\n            rightActionActivated: isActivated\n          });\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeRow, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._ensureScrollEnabledTimer);\n\n      this._translateX.removeAllListeners();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.hiddenHeight !== nextState.hiddenHeight || this.state.hiddenWidth !== nextState.hiddenWidth || this.state.leftActionActivated !== nextState.leftActionActivated || this.state.rightActionActivated !== nextState.rightActionActivated || this.state.leftActionState !== nextState.leftActionState || this.state.rightActionState !== nextState.rightActionState || !this.props.shouldItemUpdate || this.props.shouldItemUpdate && this.props.shouldItemUpdate(this.props.item, nextProps.item)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getPreviewAnimation\",\n    value: function getPreviewAnimation(toValue, delay) {\n      return Animated.timing(this._translateX, {\n        duration: this.props.previewDuration,\n        toValue: toValue,\n        delay: delay,\n        useNativeDriver: this.props.useNativeDriver\n      });\n    }\n  }, {\n    key: \"onContentLayout\",\n    value: function onContentLayout(e) {\n      var _this2 = this;\n\n      this.setState(_objectSpread({\n        dimensionsSet: !this.props.recalculateHiddenLayout\n      }, !this.props.disableHiddenLayoutCalculation ? {\n        hiddenHeight: e.nativeEvent.layout.height,\n        hiddenWidth: e.nativeEvent.layout.width\n      } : {}));\n\n      if (this.props.preview && !this.ranPreview) {\n        this.ranPreview = true;\n        this.doFullAnimation();\n\n        if (this.props.previewRepeat) {\n          this.setState({\n            previewRepeatInterval: setInterval(function () {\n              _this2.doFullAnimation();\n            }, this.state.timeBetweenPreviewRepeats)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"doFullAnimation\",\n    value: function doFullAnimation() {\n      var _this3 = this;\n\n      var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n      return this.getPreviewAnimation(previewOpenValue, this.props.previewOpenDelay).start(function () {\n        _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n      });\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.props.onRowPress) {\n        this.props.onRowPress();\n      } else {\n        if (this.props.closeOnRowPress) {\n          this.closeRow();\n        }\n      }\n    }\n  }, {\n    key: \"handleOnMoveShouldSetPanResponder\",\n    value: function handleOnMoveShouldSetPanResponder(e, gs) {\n      var dx = gs.dx;\n      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      if (this.isForceClosing) {\n        return;\n      }\n\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n      var absDx = Math.abs(dx);\n      var absDy = Math.abs(dy);\n\n      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {\n        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n          return;\n        }\n\n        if (this.parentScrollEnabled) {\n          this.parentScrollEnabled = false;\n          this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n        }\n\n        if (this.swipeInitialX === null) {\n          this.swipeInitialX = this.currentTranslateX;\n        }\n\n        if (!this.horizontalSwipeGestureBegan) {\n          this.horizontalSwipeGestureBegan = true;\n          this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n        }\n\n        var newDX = this.swipeInitialX + dx;\n\n        if (this.props.disableLeftSwipe && newDX < 0) {\n          newDX = 0;\n        }\n\n        if (this.props.disableRightSwipe && newDX > 0) {\n          newDX = 0;\n        }\n\n        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n          newDX = this.props.stopLeftSwipe;\n        }\n\n        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n          newDX = this.props.stopRightSwipe;\n        }\n\n        this._translateX.setValue(newDX);\n      }\n    }\n  }, {\n    key: \"handlePanResponderRelease\",\n    value: function handlePanResponderRelease(e, gestureState) {\n      this.props.swipeGestureEnded && this.props.swipeGestureEnded(this.props.swipeKey, {\n        translateX: this.currentTranslateX,\n        direction: this.previousTrackedDirection,\n        event: e,\n        gestureState: gestureState\n      });\n\n      if (!e.defaultPrevented) {\n        this.handlePanResponderEnd(e, gestureState);\n      }\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      var _this4 = this;\n\n      if (this.isForceClosing) {\n        setTimeout(function () {\n          _this4.isForceClosing = false;\n        }, 500);\n      }\n\n      var swipeToOpenVelocityContribution = this.props.swipeToOpenVelocityContribution;\n      var possibleExtraPixels = this.props.rightOpenValue * swipeToOpenVelocityContribution;\n      var clampedVelocity = Math.min(gestureState.vx, MAX_VELOCITY_CONTRIBUTION);\n      var projectedExtraPixels = possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\n      this._ensureScrollEnabledTimer = setTimeout(this.ensureScrollEnabled, SCROLL_LOCK_MILLISECONDS);\n\n      if (this.currentTranslateX >= 0) {\n        this.handleRightSwipe(projectedExtraPixels);\n      } else {\n        if (this.props.disableLeftSwipe) {\n          return;\n        }\n\n        this.handleLeftSwipe(projectedExtraPixels);\n      }\n    }\n  }, {\n    key: \"handleRightSwipe\",\n    value: function handleRightSwipe(projectedExtraPixels) {\n      var toValue = 0;\n      var actionSide;\n\n      if (this.swipeInitialX < this.currentTranslateX) {\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n        }\n\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {\n          toValue = this.isForceClosing ? 0 : this.props.leftActionValue;\n          actionSide = 'left';\n        }\n      } else {\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (1 - this.props.swipeToClosePercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n        }\n\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {\n          toValue = this.isForceClosing ? 0 : this.props.leftActionValue;\n          actionSide = 'left';\n        }\n      }\n\n      var action = this.determineAction(actionSide);\n      this.manuallySwipeRow(toValue, action);\n    }\n  }, {\n    key: \"handleLeftSwipe\",\n    value: function handleLeftSwipe(projectedExtraPixels) {\n      var toValue = 0;\n      var actionSide;\n\n      if (this.swipeInitialX > this.currentTranslateX) {\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n        }\n\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue) {\n          toValue = this.isForceClosing ? 0 : this.props.rightActionValue;\n          actionSide = 'right';\n        }\n      } else {\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue) {\n          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n        }\n\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue * (1 - this.props.swipeToClosePercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.rightActionValue;\n          actionSide = 'right';\n        }\n      }\n\n      var action = this.determineAction(actionSide);\n      this.manuallySwipeRow(toValue, action);\n    }\n  }, {\n    key: \"determineAction\",\n    value: function determineAction(actionSide) {\n      var _this5 = this;\n\n      if (actionSide === 'right') {\n        return function () {\n          _this5.props.onRightAction && _this5.props.onRightAction();\n\n          _this5.setState({\n            rightActionState: !_this5.state.rightActionState\n          });\n        };\n      }\n\n      if (actionSide === 'left') {\n        return function () {\n          _this5.props.onLeftAction && _this5.props.onLeftAction();\n\n          _this5.setState({\n            leftActionState: !_this5.state.leftActionState\n          });\n        };\n      }\n    }\n  }, {\n    key: \"closeRow\",\n    value: function closeRow() {\n      this.manuallySwipeRow(0);\n    }\n  }, {\n    key: \"forceCloseRow\",\n    value: function forceCloseRow(direction) {\n      var _this6 = this;\n\n      this.manuallySwipeRow(0, function () {\n        if (direction === 'right' && _this6.props.onForceCloseToRightEnd) {\n          _this6.props.onForceCloseToRightEnd();\n        } else if (direction === 'left' && _this6.props.onForceCloseToLeftEnd) {\n          _this6.props.onForceCloseToLeftEnd();\n        }\n      });\n    }\n  }, {\n    key: \"closeRowWithoutAnimation\",\n    value: function closeRowWithoutAnimation() {\n      this._translateX.setValue(0);\n\n      this.ensureScrollEnabled();\n      this.isOpen = false;\n      this.props.onRowDidClose && this.props.onRowDidClose();\n      this.props.onRowClose && this.props.onRowClose();\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"manuallySwipeRow\",\n    value: function manuallySwipeRow(toValue, onAnimationEnd) {\n      var _this7 = this;\n\n      Animated.spring(this._translateX, {\n        toValue: toValue,\n        friction: this.props.friction,\n        tension: this.props.tension,\n        restSpeedThreshold: this.props.restSpeedThreshold,\n        restDisplacementThreshold: this.props.restDisplacementThreshold,\n        useNativeDriver: this.props.useNativeDriver\n      }).start(function () {\n        _this7.ensureScrollEnabled();\n\n        if (toValue === 0) {\n          _this7.isOpen = false;\n          _this7.props.onRowDidClose && _this7.props.onRowDidClose();\n        } else {\n          _this7.isOpen = true;\n          _this7.props.onRowDidOpen && _this7.props.onRowDidOpen(toValue);\n        }\n\n        if (onAnimationEnd) {\n          onAnimationEnd();\n        }\n      });\n\n      if (toValue === 0) {\n        this.props.onRowClose && this.props.onRowClose();\n      } else {\n        this.props.onRowOpen && this.props.onRowOpen(toValue);\n      }\n\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"renderVisibleContent\",\n    value: function renderVisibleContent() {\n      if (!this.props.closeOnRowPress) {\n        return React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          leftActionActivated: this.state.leftActionActivated,\n          rightActionActivated: this.state.rightActionActivated,\n          leftActionState: this.state.leftActionState,\n          rightActionState: this.state.rightActionState,\n          swipeAnimatedValue: this._translateX\n        }));\n      }\n\n      var onPress = this.props.children[1].props.onPress;\n\n      if (onPress) {\n        return React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          onPress: this.combinedOnPress,\n          leftActionActivated: this.state.leftActionActivated,\n          rightActionActivated: this.state.rightActionActivated,\n          leftActionState: this.state.leftActionState,\n          rightActionState: this.state.rightActionState,\n          swipeAnimatedValue: this._translateX\n        }));\n      }\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: this.combinedOnPress,\n        accessible: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }\n      }, React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n        leftActionActivated: this.state.leftActionActivated,\n        rightActionActivated: this.state.rightActionActivated,\n        leftActionState: this.state.leftActionState,\n        rightActionState: this.state.rightActionState,\n        swipeAnimatedValue: this._translateX\n      })));\n    }\n  }, {\n    key: \"renderRowContent\",\n    value: function renderRowContent() {\n      var _this8 = this;\n\n      if (this.state.dimensionsSet) {\n        return React.createElement(Animated.View, _extends({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers, {\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 17\n          }\n        }), this.renderVisibleContent());\n      } else {\n        return React.createElement(Animated.View, _extends({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers, {\n          onLayout: function onLayout(e) {\n            return _this8.onContentLayout(e);\n          },\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 17\n          }\n        }), this.renderVisibleContent());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: this.props.style ? this.props.style : styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [styles.hidden, {\n          height: this.state.hiddenHeight,\n          width: this.state.hiddenWidth\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 17\n        }\n      }, React.cloneElement(this.props.children[0], _objectSpread(_objectSpread({}, this.props.children[0].props), {}, {\n        leftActionActivated: this.state.leftActionActivated,\n        rightActionActivated: this.state.rightActionActivated,\n        leftActionState: this.state.leftActionState,\n        rightActionState: this.state.rightActionState,\n        swipeAnimatedValue: this._translateX\n      }))), this.renderRowContent());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (!nextProps.previewRepeat) {\n        clearInterval(prevState.previewRepeatInterval);\n        prevState.previewRepeatInterval = null;\n      }\n\n      prevState.timeBetweenPreviewRepeats = nextProps.previewDuration * 2 + nextProps.previewOpenDelay + PREVIEW_CLOSE_DELAY + nextProps.previewRepeatDelay;\n      return prevState;\n    }\n  }]);\n\n  return SwipeRow;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {},\n  hidden: {\n    zIndex: 1,\n    bottom: 0,\n    left: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n});\nSwipeRow.propTypes = {\n  setScrollEnabled: PropTypes.func,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  closeOnRowPress: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  style: PropTypes.object,\n  preview: PropTypes.bool,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  forceCloseToLeftThreshold: PropTypes.number,\n  forceCloseToRightThreshold: PropTypes.number,\n  onForceCloseToLeft: PropTypes.func,\n  onForceCloseToRight: PropTypes.func,\n  onForceCloseToLeftEnd: PropTypes.func,\n  onForceCloseToRightEnd: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  swipeKey: PropTypes.string\n};\nSwipeRow.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  preview: false,\n  previewDuration: 300,\n  previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  item: {},\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000\n};\nexport default SwipeRow;","map":{"version":3,"names":["React","Component","PropTypes","DEFAULT_PREVIEW_OPEN_DELAY","PREVIEW_CLOSE_DELAY","MAX_VELOCITY_CONTRIBUTION","SCROLL_LOCK_MILLISECONDS","SwipeRow","props","ensureScrollEnabled","parentScrollEnabled","setScrollEnabled","combinedOnPress","onPress","children","onRowPress","isOpen","leftActionActivated","rightActionActivated","previousTrackedTranslateX","currentTranslateX","previousTrackedDirection","horizontalSwipeGestureBegan","swipeInitialX","ranPreview","_ensureScrollEnabledTimer","isForceClosing","state","leftActionState","initialLeftActionState","rightActionState","initialRightActionState","previewRepeatInterval","timeBetweenPreviewRepeats","dimensionsSet","hiddenHeight","disableHiddenLayoutCalculation","hiddenWidth","_translateX","Animated","Value","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","e","gs","handleOnMoveShouldSetPanResponder","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderRelease","onPanResponderTerminate","handlePanResponderEnd","onShouldBlockNativeResponder","addListener","value","onSwipeValueChange","direction","Math","abs","key","swipeKey","forceCloseToRightThreshold","Dimensions","get","width","forceCloseRow","onForceCloseToRight","forceCloseToLeftThreshold","onForceCloseToLeft","onLeftActionStatusChange","leftActivationValue","absValue","isActivated","setState","onRightActionStatusChange","rightActivationValue","clearTimeout","removeAllListeners","nextProps","nextState","shouldItemUpdate","item","toValue","delay","timing","duration","previewDuration","useNativeDriver","recalculateHiddenLayout","nativeEvent","layout","height","preview","doFullAnimation","previewRepeat","setInterval","previewOpenValue","rightOpenValue","getPreviewAnimation","previewOpenDelay","start","closeOnRowPress","closeRow","dx","directionalDistanceChangeThreshold","gestureState","dy","absDx","absDy","swipeGestureBegan","newDX","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","setValue","swipeGestureEnded","translateX","event","defaultPrevented","setTimeout","swipeToOpenVelocityContribution","possibleExtraPixels","clampedVelocity","min","vx","projectedExtraPixels","handleRightSwipe","handleLeftSwipe","actionSide","leftOpenValue","swipeToOpenPercent","leftActionValue","swipeToClosePercent","action","determineAction","manuallySwipeRow","rightActionValue","onRightAction","onLeftAction","onForceCloseToRightEnd","onForceCloseToLeftEnd","onRowDidClose","onRowClose","onAnimationEnd","spring","friction","tension","restSpeedThreshold","restDisplacementThreshold","onRowDidOpen","onRowOpen","cloneElement","swipeAnimatedValue","panHandlers","zIndex","transform","renderVisibleContent","onContentLayout","style","styles","container","hidden","renderRowContent","prevState","clearInterval","previewRepeatDelay","StyleSheet","bottom","left","overflow","position","right","top","propTypes","func","number","bool","object","node","isRequired","string","defaultProps"],"sources":["D:/GitHub/mern-stack-ecommerce/easy-shop/node_modules/react-native-swipe-list-view/components/SwipeRow.js"],"sourcesContent":["'use strict';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Dimensions,\r\n    Animated,\r\n    PanResponder,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n    View,\r\n} from 'react-native';\r\n\r\nconst DEFAULT_PREVIEW_OPEN_DELAY = 700;\r\nconst PREVIEW_CLOSE_DELAY = 300;\r\nconst MAX_VELOCITY_CONTRIBUTION = 5;\r\nconst SCROLL_LOCK_MILLISECONDS = 300;\r\n\r\n/**\r\n * Row that is generally used in a SwipeListView.\r\n * If you are rendering a SwipeRow explicitly you must pass the SwipeRow exactly two children.\r\n * The first will be rendered behind the second.\r\n * e.g.\r\n  <SwipeRow>\r\n      <View style={hiddenRowStyle} />\r\n      <View style={visibleRowStyle} />\r\n  </SwipeRow>\r\n */\r\nclass SwipeRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.isOpen = false;\r\n        this.leftActionActivated = false;\r\n        this.rightActionActivated = false;\r\n        this.previousTrackedTranslateX = 0;\r\n        this.currentTranslateX = 0;\r\n        this.previousTrackedDirection = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n        this.swipeInitialX = null;\r\n        this.parentScrollEnabled = true;\r\n        this.ranPreview = false;\r\n        this._ensureScrollEnabledTimer = null;\r\n        this.isForceClosing = false;\r\n        this.state = {\r\n            leftActionActivated: false,\r\n            rightActionActivated: false,\r\n            leftActionState: this.props.initialLeftActionState || false,\r\n            rightActionState: this.props.initialRightActionState || false,\r\n            previewRepeatInterval: null,\r\n            timeBetweenPreviewRepeats: null,\r\n            dimensionsSet: false,\r\n            hiddenHeight: this.props.disableHiddenLayoutCalculation\r\n                ? '100%'\r\n                : 0,\r\n            hiddenWidth: this.props.disableHiddenLayoutCalculation ? '100%' : 0,\r\n        };\r\n        this._translateX = new Animated.Value(0);\r\n\r\n        this._panResponder = PanResponder.create({\r\n            onMoveShouldSetPanResponder: (e, gs) =>\r\n                this.handleOnMoveShouldSetPanResponder(e, gs),\r\n            onPanResponderMove: (e, gs) => this.handlePanResponderMove(e, gs),\r\n            onPanResponderRelease: (e, gs) =>\r\n                this.handlePanResponderRelease(e, gs),\r\n            onPanResponderTerminate: (e, gs) =>\r\n                this.handlePanResponderEnd(e, gs),\r\n            onShouldBlockNativeResponder: () => false,\r\n        });\r\n\r\n        this._translateX.addListener(({ value }) => {\r\n            this.currentTranslateX = value;\r\n            if (this.props.onSwipeValueChange) {\r\n                let direction = this.previousTrackedDirection;\r\n                if (\r\n                    value !== this.previousTrackedTranslateX &&\r\n                    Math.abs(value - this.previousTrackedTranslateX) > 0.5\r\n                ) {\r\n                    direction =\r\n                        value > this.previousTrackedTranslateX\r\n                            ? 'right'\r\n                            : 'left';\r\n                }\r\n                this.props.onSwipeValueChange &&\r\n                    this.props.onSwipeValueChange({\r\n                        isOpen: this.isOpen,\r\n                        direction,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                this.previousTrackedTranslateX = value;\r\n                this.previousTrackedDirection = direction;\r\n            }\r\n        });\r\n\r\n        if (\r\n            this.props.forceCloseToRightThreshold &&\r\n            this.props.forceCloseToRightThreshold > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                if (\r\n                    !this.isForceClosing &&\r\n                    Dimensions.get('window').width + value <\r\n                        this.props.forceCloseToRightThreshold\r\n                ) {\r\n                    this.isForceClosing = true;\r\n                    this.forceCloseRow('right');\r\n                    if (this.props.onForceCloseToRight) {\r\n                        this.props.onForceCloseToRight();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.forceCloseToLeftThreshold &&\r\n            this.props.forceCloseToRightThreshold > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                if (\r\n                    !this.isForceClosing &&\r\n                    Dimensions.get('window').width - value <\r\n                        this.props.forceCloseToLeftThreshold\r\n                ) {\r\n                    this.isForceClosing = true;\r\n                    this.forceCloseRow('left');\r\n                    if (this.props.onForceCloseToLeft) {\r\n                        this.props.onForceCloseToLeft();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.onLeftActionStatusChange &&\r\n            this.props.leftActivationValue &&\r\n            this.props.leftActivationValue > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                const absValue = Math.abs(value);\r\n                const isActivated = absValue > this.props.leftActivationValue;\r\n                if (this.leftActionActivated !== isActivated && value > 0) {\r\n                    this.props.onLeftActionStatusChange({\r\n                        isActivated,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                    this.leftActionActivated = isActivated;\r\n                    this.setState({\r\n                        leftActionActivated: isActivated,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.onRightActionStatusChange &&\r\n            this.props.rightActivationValue &&\r\n            this.props.rightActivationValue < 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                const absValue = Math.abs(value);\r\n                const isActivated =\r\n                    absValue > Math.abs(this.props.rightActivationValue);\r\n                if (this.rightActionActivated !== isActivated && value < 0) {\r\n                    this.props.onRightActionStatusChange({\r\n                        isActivated,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                    this.rightActionActivated = isActivated;\r\n                    this.setState({\r\n                        rightActionActivated: isActivated,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this._ensureScrollEnabledTimer);\r\n        this._translateX.removeAllListeners();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (\r\n            this.state.hiddenHeight !== nextState.hiddenHeight ||\r\n            this.state.hiddenWidth !== nextState.hiddenWidth ||\r\n            this.state.leftActionActivated !== nextState.leftActionActivated ||\r\n            this.state.rightActionActivated !==\r\n                nextState.rightActionActivated ||\r\n            this.state.leftActionState !== nextState.leftActionState ||\r\n            this.state.rightActionState !== nextState.rightActionState ||\r\n            !this.props.shouldItemUpdate ||\r\n            (this.props.shouldItemUpdate &&\r\n                this.props.shouldItemUpdate(this.props.item, nextProps.item))\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (!nextProps.previewRepeat) {\r\n            clearInterval(prevState.previewRepeatInterval);\r\n            prevState.previewRepeatInterval = null;\r\n        }\r\n        prevState.timeBetweenPreviewRepeats =\r\n            nextProps.previewDuration * 2 +\r\n            nextProps.previewOpenDelay +\r\n            PREVIEW_CLOSE_DELAY +\r\n            nextProps.previewRepeatDelay;\r\n        return prevState;\r\n    }\r\n\r\n    getPreviewAnimation(toValue, delay) {\r\n        return Animated.timing(this._translateX, {\r\n            duration: this.props.previewDuration,\r\n            toValue,\r\n            delay,\r\n            useNativeDriver: this.props.useNativeDriver,\r\n        });\r\n    }\r\n\r\n    onContentLayout(e) {\r\n        this.setState({\r\n            dimensionsSet: !this.props.recalculateHiddenLayout,\r\n            ...(!this.props.disableHiddenLayoutCalculation\r\n                ? {\r\n                      hiddenHeight: e.nativeEvent.layout.height,\r\n                      hiddenWidth: e.nativeEvent.layout.width,\r\n                  }\r\n                : {}),\r\n        });\r\n\r\n        if (this.props.preview && !this.ranPreview) {\r\n            this.ranPreview = true;\r\n            this.doFullAnimation();\r\n            if (this.props.previewRepeat) {\r\n                this.setState({\r\n                    previewRepeatInterval: setInterval(() => {\r\n                        this.doFullAnimation();\r\n                    }, this.state.timeBetweenPreviewRepeats),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    doFullAnimation() {\r\n        const previewOpenValue =\r\n            this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\r\n        return this.getPreviewAnimation(\r\n            previewOpenValue,\r\n            this.props.previewOpenDelay\r\n        ).start(() => {\r\n            this.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\r\n        });\r\n    }\r\n\r\n    onRowPress() {\r\n        if (this.props.onRowPress) {\r\n            this.props.onRowPress();\r\n        } else {\r\n            if (this.props.closeOnRowPress) {\r\n                this.closeRow();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleOnMoveShouldSetPanResponder(e, gs) {\r\n        const { dx } = gs;\r\n        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\r\n    }\r\n\r\n    handlePanResponderMove(e, gestureState) {\r\n        /* If the view is force closing, then ignore Moves. Return */\r\n        if (this.isForceClosing) {\r\n            return;\r\n        }\r\n\r\n        /* Else, do normal job */\r\n        const { dx, dy } = gestureState;\r\n        const absDx = Math.abs(dx);\r\n        const absDy = Math.abs(dy);\r\n\r\n        // this check may not be necessary because we don't capture the move until we pass the threshold\r\n        // just being extra safe here\r\n        if (\r\n            absDx > this.props.directionalDistanceChangeThreshold ||\r\n            absDy > this.props.directionalDistanceChangeThreshold\r\n        ) {\r\n            // we have enough to determine direction\r\n            if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\r\n                // user is moving vertically, do nothing, listView will handle\r\n                return;\r\n            }\r\n\r\n            // user is moving horizontally\r\n            if (this.parentScrollEnabled) {\r\n                // disable scrolling on the listView parent\r\n                this.parentScrollEnabled = false;\r\n                this.props.setScrollEnabled &&\r\n                    this.props.setScrollEnabled(false);\r\n            }\r\n\r\n            if (this.swipeInitialX === null) {\r\n                // set tranlateX value when user started swiping\r\n                this.swipeInitialX = this.currentTranslateX;\r\n            }\r\n            if (!this.horizontalSwipeGestureBegan) {\r\n                this.horizontalSwipeGestureBegan = true;\r\n                this.props.swipeGestureBegan && this.props.swipeGestureBegan();\r\n            }\r\n\r\n            let newDX = this.swipeInitialX + dx;\r\n            if (this.props.disableLeftSwipe && newDX < 0) {\r\n                newDX = 0;\r\n            }\r\n            if (this.props.disableRightSwipe && newDX > 0) {\r\n                newDX = 0;\r\n            }\r\n\r\n            if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\r\n                newDX = this.props.stopLeftSwipe;\r\n            }\r\n            if (\r\n                this.props.stopRightSwipe &&\r\n                newDX < this.props.stopRightSwipe\r\n            ) {\r\n                newDX = this.props.stopRightSwipe;\r\n            }\r\n\r\n            this._translateX.setValue(newDX);\r\n        }\r\n    }\r\n\r\n    ensureScrollEnabled = () => {\r\n        if (!this.parentScrollEnabled) {\r\n            this.parentScrollEnabled = true;\r\n            this.props.setScrollEnabled && this.props.setScrollEnabled(true);\r\n        }\r\n    };\r\n\r\n    handlePanResponderRelease(e, gestureState) {\r\n        this.props.swipeGestureEnded &&\r\n            this.props.swipeGestureEnded(this.props.swipeKey, {\r\n                translateX: this.currentTranslateX,\r\n                direction: this.previousTrackedDirection,\r\n                event: e,\r\n                gestureState,\r\n            });\r\n\r\n        // If preventDefault() called on the event, do not handle responder end.\r\n        if (!e.defaultPrevented) {\r\n            this.handlePanResponderEnd(e, gestureState);\r\n        }\r\n    }\r\n\r\n    handlePanResponderEnd(e, gestureState) {\r\n        /* PanEnd will reset the force-closing state when it's true. */\r\n        if (this.isForceClosing) {\r\n            setTimeout(() => {\r\n                this.isForceClosing = false;\r\n            }, 500); // 500 is the default Animated.spring's duration used in manuallySwipeRow\r\n        }\r\n        // decide how much the velocity will affect the final position that the list item settles in.\r\n        const swipeToOpenVelocityContribution = this.props\r\n            .swipeToOpenVelocityContribution;\r\n        const possibleExtraPixels =\r\n            this.props.rightOpenValue * swipeToOpenVelocityContribution;\r\n        const clampedVelocity = Math.min(\r\n            gestureState.vx,\r\n            MAX_VELOCITY_CONTRIBUTION\r\n        );\r\n        const projectedExtraPixels =\r\n            possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\r\n\r\n        // re-enable scrolling on listView parent\r\n        this._ensureScrollEnabledTimer = setTimeout(\r\n            this.ensureScrollEnabled,\r\n            SCROLL_LOCK_MILLISECONDS\r\n        );\r\n\r\n        // finish up the animation\r\n        if (this.currentTranslateX >= 0) {\r\n            // trying to swipe right\r\n            // if (this.props.disableRightSwipe) {\r\n            //    return;\r\n            // }\r\n\r\n            this.handleRightSwipe(projectedExtraPixels);\r\n        } else {\r\n            // trying to swipe left\r\n            if (this.props.disableLeftSwipe) {\r\n                return;\r\n            }\r\n\r\n            this.handleLeftSwipe(projectedExtraPixels);\r\n        }\r\n    }\r\n\r\n    handleRightSwipe(projectedExtraPixels) {\r\n        let toValue = 0;\r\n        let actionSide;\r\n        if (this.swipeInitialX < this.currentTranslateX) {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)\r\n            ) {\r\n                // we're more than halfway\r\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftActivationValue\r\n            ) {\r\n                // we've passed the threshold to trigger the leftActionValue\r\n                toValue = this.isForceClosing ? 0 : this.props.leftActionValue;\r\n                actionSide = 'left';\r\n            }\r\n        } else {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftOpenValue *\r\n                    (1 - this.props.swipeToClosePercent / 100)\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftActivationValue\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.leftActionValue;\r\n                actionSide = 'left';\r\n            }\r\n        }\r\n\r\n        const action = this.determineAction(actionSide);\r\n        this.manuallySwipeRow(toValue, action);\r\n    }\r\n\r\n    handleLeftSwipe(projectedExtraPixels) {\r\n        let toValue = 0;\r\n        let actionSide;\r\n        if (this.swipeInitialX > this.currentTranslateX) {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightOpenValue *\r\n                    (this.props.swipeToOpenPercent / 100)\r\n            ) {\r\n                // we're more than halfway\r\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightActivationValue\r\n            ) {\r\n                // we've passed the threshold to trigger the rightActionValue\r\n                toValue = this.isForceClosing ? 0 : this.props.rightActionValue;\r\n                actionSide = 'right';\r\n            }\r\n        } else {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightOpenValue\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightActivationValue *\r\n                    (1 - this.props.swipeToClosePercent / 100)\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.rightActionValue;\r\n                actionSide = 'right';\r\n            }\r\n        }\r\n        const action = this.determineAction(actionSide);\r\n        this.manuallySwipeRow(toValue, action);\r\n    }\r\n\r\n    determineAction(actionSide) {\r\n        if (actionSide === 'right') {\r\n            return () => {\r\n                this.props.onRightAction && this.props.onRightAction();\r\n                this.setState({\r\n                    rightActionState: !this.state.rightActionState,\r\n                });\r\n            };\r\n        }\r\n        if (actionSide === 'left') {\r\n            return () => {\r\n                this.props.onLeftAction && this.props.onLeftAction();\r\n                this.setState({\r\n                    leftActionState: !this.state.leftActionState,\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    /*\r\n     * This method is called by SwipeListView\r\n     */\r\n    closeRow() {\r\n        this.manuallySwipeRow(0);\r\n    }\r\n\r\n    /**\r\n     * Force close the row toward the end of the given direction.\r\n     * @param  {String} direction The direction to force close.\r\n     */\r\n    forceCloseRow(direction) {\r\n        this.manuallySwipeRow(0, () => {\r\n            if (direction === 'right' && this.props.onForceCloseToRightEnd) {\r\n                this.props.onForceCloseToRightEnd();\r\n            } else if (\r\n                direction === 'left' &&\r\n                this.props.onForceCloseToLeftEnd\r\n            ) {\r\n                this.props.onForceCloseToLeftEnd();\r\n            }\r\n        });\r\n    }\r\n\r\n    closeRowWithoutAnimation() {\r\n        this._translateX.setValue(0);\r\n\r\n        this.ensureScrollEnabled();\r\n        this.isOpen = false;\r\n        this.props.onRowDidClose && this.props.onRowDidClose();\r\n\r\n        this.props.onRowClose && this.props.onRowClose();\r\n\r\n        this.swipeInitialX = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n    }\r\n\r\n    manuallySwipeRow(toValue, onAnimationEnd) {\r\n        Animated.spring(this._translateX, {\r\n            toValue,\r\n            friction: this.props.friction,\r\n            tension: this.props.tension,\r\n            restSpeedThreshold: this.props.restSpeedThreshold,\r\n            restDisplacementThreshold: this.props.restDisplacementThreshold,\r\n            useNativeDriver: this.props.useNativeDriver,\r\n        }).start(() => {\r\n            this.ensureScrollEnabled();\r\n            if (toValue === 0) {\r\n                this.isOpen = false;\r\n                this.props.onRowDidClose && this.props.onRowDidClose();\r\n            } else {\r\n                this.isOpen = true;\r\n                this.props.onRowDidOpen && this.props.onRowDidOpen(toValue);\r\n            }\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n        });\r\n\r\n        if (toValue === 0) {\r\n            this.props.onRowClose && this.props.onRowClose();\r\n        } else {\r\n            this.props.onRowOpen && this.props.onRowOpen(toValue);\r\n        }\r\n\r\n        // reset everything\r\n        this.swipeInitialX = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n    }\r\n\r\n    combinedOnPress = (...args) => {\r\n        const onPress = this.props.children[1].props.onPress;\r\n        this.onRowPress();\r\n        onPress && onPress(...args);\r\n    };\r\n\r\n    renderVisibleContent() {\r\n        if (!this.props.closeOnRowPress) {\r\n            return React.cloneElement(this.props.children[1], {\r\n                ...this.props.children[1].props,\r\n                leftActionActivated: this.state.leftActionActivated,\r\n                rightActionActivated: this.state.rightActionActivated,\r\n                leftActionState: this.state.leftActionState,\r\n                rightActionState: this.state.rightActionState,\r\n                swipeAnimatedValue: this._translateX,\r\n            });\r\n        }\r\n\r\n        // handle touchables\r\n        const onPress = this.props.children[1].props.onPress;\r\n\r\n        if (onPress) {\r\n            return React.cloneElement(this.props.children[1], {\r\n                ...this.props.children[1].props,\r\n                onPress: this.combinedOnPress,\r\n                leftActionActivated: this.state.leftActionActivated,\r\n                rightActionActivated: this.state.rightActionActivated,\r\n                leftActionState: this.state.leftActionState,\r\n                rightActionState: this.state.rightActionState,\r\n                swipeAnimatedValue: this._translateX,\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TouchableOpacity\r\n                activeOpacity={1}\r\n                onPress={this.combinedOnPress}\r\n                accessible={false}\r\n            >\r\n                {React.cloneElement(this.props.children[1], {\r\n                    ...this.props.children[1].props,\r\n                    leftActionActivated: this.state.leftActionActivated,\r\n                    rightActionActivated: this.state.rightActionActivated,\r\n                    leftActionState: this.state.leftActionState,\r\n                    rightActionState: this.state.rightActionState,\r\n                    swipeAnimatedValue: this._translateX,\r\n                })}\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n\r\n    renderRowContent() {\r\n        // We do this annoying if statement for performance.\r\n        // We don't want the onLayout func to run after it runs once.\r\n        if (this.state.dimensionsSet) {\r\n            return (\r\n                <Animated.View\r\n                    manipulationModes={['translateX']}\r\n                    {...this._panResponder.panHandlers}\r\n                    style={{\r\n                        zIndex: 2,\r\n                        transform: [{ translateX: this._translateX }],\r\n                    }}\r\n                >\r\n                    {this.renderVisibleContent()}\r\n                </Animated.View>\r\n            );\r\n        } else {\r\n            return (\r\n                <Animated.View\r\n                    manipulationModes={['translateX']}\r\n                    {...this._panResponder.panHandlers}\r\n                    onLayout={e => this.onContentLayout(e)}\r\n                    style={{\r\n                        zIndex: 2,\r\n                        transform: [{ translateX: this._translateX }],\r\n                    }}\r\n                >\r\n                    {this.renderVisibleContent()}\r\n                </Animated.View>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View\r\n                style={this.props.style ? this.props.style : styles.container}\r\n            >\r\n                <View\r\n                    style={[\r\n                        styles.hidden,\r\n                        {\r\n                            height: this.state.hiddenHeight,\r\n                            width: this.state.hiddenWidth,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {React.cloneElement(this.props.children[0], {\r\n                        ...this.props.children[0].props,\r\n                        leftActionActivated: this.state.leftActionActivated,\r\n                        rightActionActivated: this.state.rightActionActivated,\r\n                        leftActionState: this.state.leftActionState,\r\n                        rightActionState: this.state.rightActionState,\r\n                        swipeAnimatedValue: this._translateX,\r\n                    })}\r\n                </View>\r\n                {this.renderRowContent()}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        // As of RN 0.29 flex: 1 is causing all rows to be the same height\r\n        // flex: 1\r\n    },\r\n    hidden: {\r\n        zIndex: 1,\r\n        bottom: 0,\r\n        left: 0,\r\n        overflow: 'hidden',\r\n        position: 'absolute',\r\n        right: 0,\r\n        top: 0,\r\n    },\r\n});\r\n\r\nSwipeRow.propTypes = {\r\n    /**\r\n     * Used by the SwipeListView to close rows on scroll events.\r\n     * You shouldn't need to use this prop explicitly.\r\n     */\r\n    setScrollEnabled: PropTypes.func,\r\n    /**\r\n     * Called when it has been detected that a row should be swiped open.\r\n     */\r\n    swipeGestureBegan: PropTypes.func,\r\n    /**\r\n     * Called when user has ended their swipe gesture\r\n     */\r\n    swipeGestureEnded: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating open. Used by the SwipeListView\r\n     * to keep references to open rows.\r\n     */\r\n    onRowOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated open.\r\n     */\r\n    onRowDidOpen: PropTypes.func,\r\n    /**\r\n     * TranslateX value for opening the row to the left (positive number)\r\n     */\r\n    leftOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for opening the row to the right (negative number)\r\n     */\r\n    rightOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\r\n     */\r\n    leftActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onRightActionStatusChange (negative number)\r\n     */\r\n    rightActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for left action to which the row will be shifted after gesture release\r\n     */\r\n    leftActionValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for right action to which the row will be shifted after gesture release\r\n     */\r\n    rightActionValue: PropTypes.number,\r\n    /**\r\n     * Initial value for left action state (default is false)\r\n     */\r\n    initialLeftActionState: PropTypes.bool,\r\n    /**\r\n     * Initial value for right action state (default is false)\r\n     */\r\n    initialRightActionState: PropTypes.bool,\r\n    /**\r\n     * TranslateX value for stop the row to the left (positive number)\r\n     */\r\n    stopLeftSwipe: PropTypes.number,\r\n    /**\r\n     * TranslateX value for stop the row to the right (negative number)\r\n     */\r\n    stopRightSwipe: PropTypes.number,\r\n    /**\r\n     * Friction for the open / close animation\r\n     */\r\n    friction: PropTypes.number,\r\n    /**\r\n     * Tension for the open / close animation\r\n     */\r\n    tension: PropTypes.number,\r\n    /**\r\n     * RestSpeedThreshold for the open / close animation\r\n     */\r\n    restSpeedThreshold: PropTypes.number,\r\n    /**\r\n     * RestDisplacementThreshold for the open / close animation\r\n     */\r\n    restDisplacementThreshold: PropTypes.number,\r\n    /**\r\n     * Should the row be closed when it is tapped\r\n     */\r\n    closeOnRowPress: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe the row left\r\n     */\r\n    disableLeftSwipe: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe the row right\r\n     */\r\n    disableRightSwipe: PropTypes.bool,\r\n    /**\r\n     * Enable hidden row onLayout calculations to run always\r\n     */\r\n    recalculateHiddenLayout: PropTypes.bool,\r\n    /**\r\n     * Disable hidden row onLayout calculations\r\n     */\r\n    disableHiddenLayoutCalculation: PropTypes.bool,\r\n    /**\r\n     * Called when a swipe row is animating closed\r\n     */\r\n    onRowClose: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated closed\r\n     */\r\n    onRowDidClose: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to leftActivationValue\r\n     */\r\n    onLeftAction: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to rightActivationValue\r\n     */\r\n    onRightAction: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the leftActivationValue\r\n     */\r\n    onLeftActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the rightActivationValue\r\n     */\r\n    onRightActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Styles for the parent wrapper View of the SwipeRow\r\n     */\r\n    style: PropTypes.object,\r\n    /**\r\n     * Should the row do a slide out preview to show that it is swipeable\r\n     */\r\n    preview: PropTypes.bool,\r\n    /**\r\n     * Duration of the slide out preview animation\r\n     */\r\n    previewDuration: PropTypes.number,\r\n    /**\r\n     * Should the animation repeat until false is provided\r\n     */\r\n    previewRepeat: PropTypes.bool,\r\n    /**\r\n     * Time between each full completed animation in milliseconds\r\n     * Default: 1000 (1 second)\r\n     */\r\n    previewRepeatDelay: PropTypes.number,\r\n    /**\r\n     * TranslateX value for the slide out preview animation\r\n     * Default: 0.5 * props.rightOpenValue\r\n     */\r\n    previewOpenValue: PropTypes.number,\r\n    /**\r\n     * The dx value used to detect when a user has begun a swipe gesture\r\n     */\r\n    directionalDistanceChangeThreshold: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row opening.\r\n     */\r\n    swipeToOpenPercent: PropTypes.number,\r\n    /**\r\n     * Describes how much the ending velocity of the gesture contributes to whether the swipe will result in the item being closed or open.\r\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\r\n     * and it'll just take into consideration the swipeToOpenPercent.\r\n     */\r\n    swipeToOpenVelocityContribution: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row closing.\r\n     */\r\n    swipeToClosePercent: PropTypes.number,\r\n    /**\r\n     * callback to determine whether component should update (currentItem, newItem)\r\n     */\r\n    shouldItemUpdate: PropTypes.func,\r\n    /**\r\n     * Callback invoked any time the swipe value of the row is changed\r\n     */\r\n    onSwipeValueChange: PropTypes.func,\r\n    /**\r\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Left End (positive number)\r\n     */\r\n    forceCloseToLeftThreshold: PropTypes.number,\r\n    /**\r\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Right End (positive number)\r\n     */\r\n    forceCloseToRightThreshold: PropTypes.number,\r\n    /**\r\n     * Callback invoked when row is force closing to the Left End\r\n     */\r\n    onForceCloseToLeft: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row is force closing to the Right End\r\n     */\r\n    onForceCloseToRight: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row has finished force closing to the Left End\r\n     */\r\n    onForceCloseToLeftEnd: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row has finished force closing to the Right End\r\n     */\r\n    onForceCloseToRightEnd: PropTypes.func,\r\n    /**\r\n     * useNativeDriver: true for all animations where possible\r\n     */\r\n    useNativeDriver: PropTypes.bool,\r\n    /**\r\n     * Children\r\n     */\r\n    children: PropTypes.node.isRequired,\r\n    /**\r\n     * Key used to identify rows on swipe value changes\r\n     */\r\n    swipeKey: PropTypes.string,\r\n};\r\n\r\nSwipeRow.defaultProps = {\r\n    leftOpenValue: 0,\r\n    rightOpenValue: 0,\r\n    closeOnRowPress: true,\r\n    disableLeftSwipe: false,\r\n    disableRightSwipe: false,\r\n    recalculateHiddenLayout: false,\r\n    disableHiddenLayoutCalculation: false,\r\n    preview: false,\r\n    previewDuration: 300,\r\n    previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\r\n    directionalDistanceChangeThreshold: 2,\r\n    swipeToOpenPercent: 50,\r\n    swipeToOpenVelocityContribution: 0,\r\n    swipeToClosePercent: 50,\r\n    item: {},\r\n    useNativeDriver: true,\r\n    previewRepeat: false,\r\n    previewRepeatDelay: 1000,\r\n};\r\n\r\nexport default SwipeRow;\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;;AAUA,IAAMC,0BAA0B,GAAG,GAAnC;AACA,IAAMC,mBAAmB,GAAG,GAA5B;AACA,IAAMC,yBAAyB,GAAG,CAAlC;AACA,IAAMC,wBAAwB,GAAG,GAAjC;;IAYMC,Q;;;;;EACF,kBAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACf,0BAAMA,KAAN;;IADe,MAmTnBC,mBAnTmB,GAmTG,YAAM;MACxB,IAAI,CAAC,MAAKC,mBAAV,EAA+B;QAC3B,MAAKA,mBAAL,GAA2B,IAA3B;QACA,MAAKF,KAAL,CAAWG,gBAAX,IAA+B,MAAKH,KAAL,CAAWG,gBAAX,CAA4B,IAA5B,CAA/B;MACH;IACJ,CAxTkB;;IAAA,MA6hBnBC,eA7hBmB,GA6hBD,YAAa;MAC3B,IAAMC,OAAO,GAAG,MAAKL,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAAvB,CAA6BK,OAA7C;;MACA,MAAKE,UAAL;;MACAF,OAAO,IAAIA,OAAO,MAAP,mBAAX;IACH,CAjiBkB;;IAEf,MAAKG,MAAL,GAAc,KAAd;IACA,MAAKC,mBAAL,GAA2B,KAA3B;IACA,MAAKC,oBAAL,GAA4B,KAA5B;IACA,MAAKC,yBAAL,GAAiC,CAAjC;IACA,MAAKC,iBAAL,GAAyB,CAAzB;IACA,MAAKC,wBAAL,GAAgC,IAAhC;IACA,MAAKC,2BAAL,GAAmC,KAAnC;IACA,MAAKC,aAAL,GAAqB,IAArB;IACA,MAAKb,mBAAL,GAA2B,IAA3B;IACA,MAAKc,UAAL,GAAkB,KAAlB;IACA,MAAKC,yBAAL,GAAiC,IAAjC;IACA,MAAKC,cAAL,GAAsB,KAAtB;IACA,MAAKC,KAAL,GAAa;MACTV,mBAAmB,EAAE,KADZ;MAETC,oBAAoB,EAAE,KAFb;MAGTU,eAAe,EAAE,MAAKpB,KAAL,CAAWqB,sBAAX,IAAqC,KAH7C;MAITC,gBAAgB,EAAE,MAAKtB,KAAL,CAAWuB,uBAAX,IAAsC,KAJ/C;MAKTC,qBAAqB,EAAE,IALd;MAMTC,yBAAyB,EAAE,IANlB;MAOTC,aAAa,EAAE,KAPN;MAQTC,YAAY,EAAE,MAAK3B,KAAL,CAAW4B,8BAAX,GACR,MADQ,GAER,CAVG;MAWTC,WAAW,EAAE,MAAK7B,KAAL,CAAW4B,8BAAX,GAA4C,MAA5C,GAAqD;IAXzD,CAAb;IAaA,MAAKE,WAAL,GAAmB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAnB;IAEA,MAAKC,aAAL,GAAqBC,YAAY,CAACC,MAAb,CAAoB;MACrCC,2BAA2B,EAAE,qCAACC,CAAD,EAAIC,EAAJ;QAAA,OACzB,MAAKC,iCAAL,CAAuCF,CAAvC,EAA0CC,EAA1C,CADyB;MAAA,CADQ;MAGrCE,kBAAkB,EAAE,4BAACH,CAAD,EAAIC,EAAJ;QAAA,OAAW,MAAKG,sBAAL,CAA4BJ,CAA5B,EAA+BC,EAA/B,CAAX;MAAA,CAHiB;MAIrCI,qBAAqB,EAAE,+BAACL,CAAD,EAAIC,EAAJ;QAAA,OACnB,MAAKK,yBAAL,CAA+BN,CAA/B,EAAkCC,EAAlC,CADmB;MAAA,CAJc;MAMrCM,uBAAuB,EAAE,iCAACP,CAAD,EAAIC,EAAJ;QAAA,OACrB,MAAKO,qBAAL,CAA2BR,CAA3B,EAA8BC,EAA9B,CADqB;MAAA,CANY;MAQrCQ,4BAA4B,EAAE;QAAA,OAAM,KAAN;MAAA;IARO,CAApB,CAArB;;IAWA,MAAKhB,WAAL,CAAiBiB,WAAjB,CAA6B,gBAAe;MAAA,IAAZC,KAAY,QAAZA,KAAY;MACxC,MAAKpC,iBAAL,GAAyBoC,KAAzB;;MACA,IAAI,MAAKhD,KAAL,CAAWiD,kBAAf,EAAmC;QAC/B,IAAIC,SAAS,GAAG,MAAKrC,wBAArB;;QACA,IACImC,KAAK,KAAK,MAAKrC,yBAAf,IACAwC,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAG,MAAKrC,yBAAtB,IAAmD,GAFvD,EAGE;UACEuC,SAAS,GACLF,KAAK,GAAG,MAAKrC,yBAAb,GACM,OADN,GAEM,MAHV;QAIH;;QACD,MAAKX,KAAL,CAAWiD,kBAAX,IACI,MAAKjD,KAAL,CAAWiD,kBAAX,CAA8B;UAC1BzC,MAAM,EAAE,MAAKA,MADa;UAE1B0C,SAAS,EAATA,SAF0B;UAG1BF,KAAK,EAALA,KAH0B;UAI1BK,GAAG,EAAE,MAAKrD,KAAL,CAAWsD;QAJU,CAA9B,CADJ;QAOA,MAAK3C,yBAAL,GAAiCqC,KAAjC;QACA,MAAKnC,wBAAL,GAAgCqC,SAAhC;MACH;IACJ,CAvBD;;IAyBA,IACI,MAAKlD,KAAL,CAAWuD,0BAAX,IACA,MAAKvD,KAAL,CAAWuD,0BAAX,GAAwC,CAF5C,EAGE;MACE,MAAKzB,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;QAAA,IAAZC,KAAY,SAAZA,KAAY;;QACxC,IACI,CAAC,MAAK9B,cAAN,IACAsC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCV,KAAjC,GACI,MAAKhD,KAAL,CAAWuD,0BAHnB,EAIE;UACE,MAAKrC,cAAL,GAAsB,IAAtB;;UACA,MAAKyC,aAAL,CAAmB,OAAnB;;UACA,IAAI,MAAK3D,KAAL,CAAW4D,mBAAf,EAAoC;YAChC,MAAK5D,KAAL,CAAW4D,mBAAX;UACH;QACJ;MACJ,CAZD;IAaH;;IAED,IACI,MAAK5D,KAAL,CAAW6D,yBAAX,IACA,MAAK7D,KAAL,CAAWuD,0BAAX,GAAwC,CAF5C,EAGE;MACE,MAAKzB,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;QAAA,IAAZC,KAAY,SAAZA,KAAY;;QACxC,IACI,CAAC,MAAK9B,cAAN,IACAsC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCV,KAAjC,GACI,MAAKhD,KAAL,CAAW6D,yBAHnB,EAIE;UACE,MAAK3C,cAAL,GAAsB,IAAtB;;UACA,MAAKyC,aAAL,CAAmB,MAAnB;;UACA,IAAI,MAAK3D,KAAL,CAAW8D,kBAAf,EAAmC;YAC/B,MAAK9D,KAAL,CAAW8D,kBAAX;UACH;QACJ;MACJ,CAZD;IAaH;;IAED,IACI,MAAK9D,KAAL,CAAW+D,wBAAX,IACA,MAAK/D,KAAL,CAAWgE,mBADX,IAEA,MAAKhE,KAAL,CAAWgE,mBAAX,GAAiC,CAHrC,EAIE;MACE,MAAKlC,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;QAAA,IAAZC,KAAY,SAAZA,KAAY;QACxC,IAAMiB,QAAQ,GAAGd,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAjB;QACA,IAAMkB,WAAW,GAAGD,QAAQ,GAAG,MAAKjE,KAAL,CAAWgE,mBAA1C;;QACA,IAAI,MAAKvD,mBAAL,KAA6ByD,WAA7B,IAA4ClB,KAAK,GAAG,CAAxD,EAA2D;UACvD,MAAKhD,KAAL,CAAW+D,wBAAX,CAAoC;YAChCG,WAAW,EAAXA,WADgC;YAEhClB,KAAK,EAALA,KAFgC;YAGhCK,GAAG,EAAE,MAAKrD,KAAL,CAAWsD;UAHgB,CAApC;;UAKA,MAAK7C,mBAAL,GAA2ByD,WAA3B;;UACA,MAAKC,QAAL,CAAc;YACV1D,mBAAmB,EAAEyD;UADX,CAAd;QAGH;MACJ,CAdD;IAeH;;IAED,IACI,MAAKlE,KAAL,CAAWoE,yBAAX,IACA,MAAKpE,KAAL,CAAWqE,oBADX,IAEA,MAAKrE,KAAL,CAAWqE,oBAAX,GAAkC,CAHtC,EAIE;MACE,MAAKvC,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;QAAA,IAAZC,KAAY,SAAZA,KAAY;QACxC,IAAMiB,QAAQ,GAAGd,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAjB;QACA,IAAMkB,WAAW,GACbD,QAAQ,GAAGd,IAAI,CAACC,GAAL,CAAS,MAAKpD,KAAL,CAAWqE,oBAApB,CADf;;QAEA,IAAI,MAAK3D,oBAAL,KAA8BwD,WAA9B,IAA6ClB,KAAK,GAAG,CAAzD,EAA4D;UACxD,MAAKhD,KAAL,CAAWoE,yBAAX,CAAqC;YACjCF,WAAW,EAAXA,WADiC;YAEjClB,KAAK,EAALA,KAFiC;YAGjCK,GAAG,EAAE,MAAKrD,KAAL,CAAWsD;UAHiB,CAArC;;UAKA,MAAK5C,oBAAL,GAA4BwD,WAA5B;;UACA,MAAKC,QAAL,CAAc;YACVzD,oBAAoB,EAAEwD;UADZ,CAAd;QAGH;MACJ,CAfD;IAgBH;;IAlJc;EAmJlB;;;;2CAEsB;MACnBI,YAAY,CAAC,KAAKrD,yBAAN,CAAZ;;MACA,KAAKa,WAAL,CAAiByC,kBAAjB;IACH;;;0CAEqBC,S,EAAWC,S,EAAW;MACxC,IACI,KAAKtD,KAAL,CAAWQ,YAAX,KAA4B8C,SAAS,CAAC9C,YAAtC,IACA,KAAKR,KAAL,CAAWU,WAAX,KAA2B4C,SAAS,CAAC5C,WADrC,IAEA,KAAKV,KAAL,CAAWV,mBAAX,KAAmCgE,SAAS,CAAChE,mBAF7C,IAGA,KAAKU,KAAL,CAAWT,oBAAX,KACI+D,SAAS,CAAC/D,oBAJd,IAKA,KAAKS,KAAL,CAAWC,eAAX,KAA+BqD,SAAS,CAACrD,eALzC,IAMA,KAAKD,KAAL,CAAWG,gBAAX,KAAgCmD,SAAS,CAACnD,gBAN1C,IAOA,CAAC,KAAKtB,KAAL,CAAW0E,gBAPZ,IAQC,KAAK1E,KAAL,CAAW0E,gBAAX,IACG,KAAK1E,KAAL,CAAW0E,gBAAX,CAA4B,KAAK1E,KAAL,CAAW2E,IAAvC,EAA6CH,SAAS,CAACG,IAAvD,CAVR,EAWE;QACE,OAAO,IAAP;MACH;;MAED,OAAO,KAAP;IACH;;;wCAemBC,O,EAASC,K,EAAO;MAChC,OAAO9C,QAAQ,CAAC+C,MAAT,CAAgB,KAAKhD,WAArB,EAAkC;QACrCiD,QAAQ,EAAE,KAAK/E,KAAL,CAAWgF,eADgB;QAErCJ,OAAO,EAAPA,OAFqC;QAGrCC,KAAK,EAALA,KAHqC;QAIrCI,eAAe,EAAE,KAAKjF,KAAL,CAAWiF;MAJS,CAAlC,CAAP;IAMH;;;oCAEe5C,C,EAAG;MAAA;;MACf,KAAK8B,QAAL;QACIzC,aAAa,EAAE,CAAC,KAAK1B,KAAL,CAAWkF;MAD/B,GAEQ,CAAC,KAAKlF,KAAL,CAAW4B,8BAAZ,GACE;QACID,YAAY,EAAEU,CAAC,CAAC8C,WAAF,CAAcC,MAAd,CAAqBC,MADvC;QAEIxD,WAAW,EAAEQ,CAAC,CAAC8C,WAAF,CAAcC,MAAd,CAAqB1B;MAFtC,CADF,GAKE,EAPV;;MAUA,IAAI,KAAK1D,KAAL,CAAWsF,OAAX,IAAsB,CAAC,KAAKtE,UAAhC,EAA4C;QACxC,KAAKA,UAAL,GAAkB,IAAlB;QACA,KAAKuE,eAAL;;QACA,IAAI,KAAKvF,KAAL,CAAWwF,aAAf,EAA8B;UAC1B,KAAKrB,QAAL,CAAc;YACV3C,qBAAqB,EAAEiE,WAAW,CAAC,YAAM;cACrC,MAAI,CAACF,eAAL;YACH,CAFiC,EAE/B,KAAKpE,KAAL,CAAWM,yBAFoB;UADxB,CAAd;QAKH;MACJ;IACJ;;;sCAEiB;MAAA;;MACd,IAAMiE,gBAAgB,GAClB,KAAK1F,KAAL,CAAW0F,gBAAX,IAA+B,KAAK1F,KAAL,CAAW2F,cAAX,GAA4B,GAD/D;MAEA,OAAO,KAAKC,mBAAL,CACHF,gBADG,EAEH,KAAK1F,KAAL,CAAW6F,gBAFR,EAGLC,KAHK,CAGC,YAAM;QACV,MAAI,CAACF,mBAAL,CAAyB,CAAzB,EAA4BhG,mBAA5B,EAAiDkG,KAAjD;MACH,CALM,CAAP;IAMH;;;iCAEY;MACT,IAAI,KAAK9F,KAAL,CAAWO,UAAf,EAA2B;QACvB,KAAKP,KAAL,CAAWO,UAAX;MACH,CAFD,MAEO;QACH,IAAI,KAAKP,KAAL,CAAW+F,eAAf,EAAgC;UAC5B,KAAKC,QAAL;QACH;MACJ;IACJ;;;sDAEiC3D,C,EAAGC,E,EAAI;MAAA,IAC7B2D,EAD6B,GACtB3D,EADsB,CAC7B2D,EAD6B;MAErC,OAAO9C,IAAI,CAACC,GAAL,CAAS6C,EAAT,IAAe,KAAKjG,KAAL,CAAWkG,kCAAjC;IACH;;;2CAEsB7D,C,EAAG8D,Y,EAAc;MAEpC,IAAI,KAAKjF,cAAT,EAAyB;QACrB;MACH;;MAJmC,IAO5B+E,EAP4B,GAOjBE,YAPiB,CAO5BF,EAP4B;MAAA,IAOxBG,EAPwB,GAOjBD,YAPiB,CAOxBC,EAPwB;MAQpC,IAAMC,KAAK,GAAGlD,IAAI,CAACC,GAAL,CAAS6C,EAAT,CAAd;MACA,IAAMK,KAAK,GAAGnD,IAAI,CAACC,GAAL,CAASgD,EAAT,CAAd;;MAIA,IACIC,KAAK,GAAG,KAAKrG,KAAL,CAAWkG,kCAAnB,IACAI,KAAK,GAAG,KAAKtG,KAAL,CAAWkG,kCAFvB,EAGE;QAEE,IAAII,KAAK,GAAGD,KAAR,IAAiB,CAAC,KAAKvF,2BAA3B,EAAwD;UAEpD;QACH;;QAGD,IAAI,KAAKZ,mBAAT,EAA8B;UAE1B,KAAKA,mBAAL,GAA2B,KAA3B;UACA,KAAKF,KAAL,CAAWG,gBAAX,IACI,KAAKH,KAAL,CAAWG,gBAAX,CAA4B,KAA5B,CADJ;QAEH;;QAED,IAAI,KAAKY,aAAL,KAAuB,IAA3B,EAAiC;UAE7B,KAAKA,aAAL,GAAqB,KAAKH,iBAA1B;QACH;;QACD,IAAI,CAAC,KAAKE,2BAAV,EAAuC;UACnC,KAAKA,2BAAL,GAAmC,IAAnC;UACA,KAAKd,KAAL,CAAWuG,iBAAX,IAAgC,KAAKvG,KAAL,CAAWuG,iBAAX,EAAhC;QACH;;QAED,IAAIC,KAAK,GAAG,KAAKzF,aAAL,GAAqBkF,EAAjC;;QACA,IAAI,KAAKjG,KAAL,CAAWyG,gBAAX,IAA+BD,KAAK,GAAG,CAA3C,EAA8C;UAC1CA,KAAK,GAAG,CAAR;QACH;;QACD,IAAI,KAAKxG,KAAL,CAAW0G,iBAAX,IAAgCF,KAAK,GAAG,CAA5C,EAA+C;UAC3CA,KAAK,GAAG,CAAR;QACH;;QAED,IAAI,KAAKxG,KAAL,CAAW2G,aAAX,IAA4BH,KAAK,GAAG,KAAKxG,KAAL,CAAW2G,aAAnD,EAAkE;UAC9DH,KAAK,GAAG,KAAKxG,KAAL,CAAW2G,aAAnB;QACH;;QACD,IACI,KAAK3G,KAAL,CAAW4G,cAAX,IACAJ,KAAK,GAAG,KAAKxG,KAAL,CAAW4G,cAFvB,EAGE;UACEJ,KAAK,GAAG,KAAKxG,KAAL,CAAW4G,cAAnB;QACH;;QAED,KAAK9E,WAAL,CAAiB+E,QAAjB,CAA0BL,KAA1B;MACH;IACJ;;;8CASyBnE,C,EAAG8D,Y,EAAc;MACvC,KAAKnG,KAAL,CAAW8G,iBAAX,IACI,KAAK9G,KAAL,CAAW8G,iBAAX,CAA6B,KAAK9G,KAAL,CAAWsD,QAAxC,EAAkD;QAC9CyD,UAAU,EAAE,KAAKnG,iBAD6B;QAE9CsC,SAAS,EAAE,KAAKrC,wBAF8B;QAG9CmG,KAAK,EAAE3E,CAHuC;QAI9C8D,YAAY,EAAZA;MAJ8C,CAAlD,CADJ;;MASA,IAAI,CAAC9D,CAAC,CAAC4E,gBAAP,EAAyB;QACrB,KAAKpE,qBAAL,CAA2BR,CAA3B,EAA8B8D,YAA9B;MACH;IACJ;;;0CAEqB9D,C,EAAG8D,Y,EAAc;MAAA;;MAEnC,IAAI,KAAKjF,cAAT,EAAyB;QACrBgG,UAAU,CAAC,YAAM;UACb,MAAI,CAAChG,cAAL,GAAsB,KAAtB;QACH,CAFS,EAEP,GAFO,CAAV;MAGH;;MAED,IAAMiG,+BAA+B,GAAG,KAAKnH,KAAL,CACnCmH,+BADL;MAEA,IAAMC,mBAAmB,GACrB,KAAKpH,KAAL,CAAW2F,cAAX,GAA4BwB,+BADhC;MAEA,IAAME,eAAe,GAAGlE,IAAI,CAACmE,GAAL,CACpBnB,YAAY,CAACoB,EADO,EAEpB1H,yBAFoB,CAAxB;MAIA,IAAM2H,oBAAoB,GACtBJ,mBAAmB,IAAIC,eAAe,GAAGxH,yBAAtB,CADvB;MAIA,KAAKoB,yBAAL,GAAiCiG,UAAU,CACvC,KAAKjH,mBADkC,EAEvCH,wBAFuC,CAA3C;;MAMA,IAAI,KAAKc,iBAAL,IAA0B,CAA9B,EAAiC;QAM7B,KAAK6G,gBAAL,CAAsBD,oBAAtB;MACH,CAPD,MAOO;QAEH,IAAI,KAAKxH,KAAL,CAAWyG,gBAAf,EAAiC;UAC7B;QACH;;QAED,KAAKiB,eAAL,CAAqBF,oBAArB;MACH;IACJ;;;qCAEgBA,oB,EAAsB;MACnC,IAAI5C,OAAO,GAAG,CAAd;MACA,IAAI+C,UAAJ;;MACA,IAAI,KAAK5G,aAAL,GAAqB,KAAKH,iBAA9B,EAAiD;QAC7C,IACI,KAAKA,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAW4H,aAAX,IAA4B,KAAK5H,KAAL,CAAW6H,kBAAX,GAAgC,GAA5D,CAFJ,EAGE;UAEEjD,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW4H,aAA/C;QACH;;QACD,IACI,KAAKhH,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAWgE,mBAFf,EAGE;UAEEY,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW8H,eAA/C;UACAH,UAAU,GAAG,MAAb;QACH;MACJ,CAhBD,MAgBO;QACH,IACI,KAAK/G,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAW4H,aAAX,IACK,IAAI,KAAK5H,KAAL,CAAW+H,mBAAX,GAAiC,GAD1C,CAFJ,EAIE;UACEnD,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW4H,aAA/C;QACH;;QACD,IACI,KAAKhH,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAWgE,mBAFf,EAGE;UACEY,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW8H,eAA/C;UACAH,UAAU,GAAG,MAAb;QACH;MACJ;;MAED,IAAMK,MAAM,GAAG,KAAKC,eAAL,CAAqBN,UAArB,CAAf;MACA,KAAKO,gBAAL,CAAsBtD,OAAtB,EAA+BoD,MAA/B;IACH;;;oCAEeR,oB,EAAsB;MAClC,IAAI5C,OAAO,GAAG,CAAd;MACA,IAAI+C,UAAJ;;MACA,IAAI,KAAK5G,aAAL,GAAqB,KAAKH,iBAA9B,EAAiD;QAC7C,IACI,KAAKA,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAW2F,cAAX,IACK,KAAK3F,KAAL,CAAW6H,kBAAX,GAAgC,GADrC,CAFJ,EAIE;UAEEjD,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW2F,cAA/C;QACH;;QACD,IACI,KAAK/E,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAWqE,oBAFf,EAGE;UAEEO,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAWmI,gBAA/C;UACAR,UAAU,GAAG,OAAb;QACH;MACJ,CAjBD,MAiBO;QACH,IACI,KAAK/G,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAW2F,cAFf,EAGE;UACEf,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAW2F,cAA/C;QACH;;QACD,IACI,KAAK/E,iBAAL,GAAyB4G,oBAAzB,GACA,KAAKxH,KAAL,CAAWqE,oBAAX,IACK,IAAI,KAAKrE,KAAL,CAAW+H,mBAAX,GAAiC,GAD1C,CAFJ,EAIE;UACEnD,OAAO,GAAG,KAAK1D,cAAL,GAAsB,CAAtB,GAA0B,KAAKlB,KAAL,CAAWmI,gBAA/C;UACAR,UAAU,GAAG,OAAb;QACH;MACJ;;MACD,IAAMK,MAAM,GAAG,KAAKC,eAAL,CAAqBN,UAArB,CAAf;MACA,KAAKO,gBAAL,CAAsBtD,OAAtB,EAA+BoD,MAA/B;IACH;;;oCAEeL,U,EAAY;MAAA;;MACxB,IAAIA,UAAU,KAAK,OAAnB,EAA4B;QACxB,OAAO,YAAM;UACT,MAAI,CAAC3H,KAAL,CAAWoI,aAAX,IAA4B,MAAI,CAACpI,KAAL,CAAWoI,aAAX,EAA5B;;UACA,MAAI,CAACjE,QAAL,CAAc;YACV7C,gBAAgB,EAAE,CAAC,MAAI,CAACH,KAAL,CAAWG;UADpB,CAAd;QAGH,CALD;MAMH;;MACD,IAAIqG,UAAU,KAAK,MAAnB,EAA2B;QACvB,OAAO,YAAM;UACT,MAAI,CAAC3H,KAAL,CAAWqI,YAAX,IAA2B,MAAI,CAACrI,KAAL,CAAWqI,YAAX,EAA3B;;UACA,MAAI,CAAClE,QAAL,CAAc;YACV/C,eAAe,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;UADnB,CAAd;QAGH,CALD;MAMH;IACJ;;;+BAKU;MACP,KAAK8G,gBAAL,CAAsB,CAAtB;IACH;;;kCAMahF,S,EAAW;MAAA;;MACrB,KAAKgF,gBAAL,CAAsB,CAAtB,EAAyB,YAAM;QAC3B,IAAIhF,SAAS,KAAK,OAAd,IAAyB,MAAI,CAAClD,KAAL,CAAWsI,sBAAxC,EAAgE;UAC5D,MAAI,CAACtI,KAAL,CAAWsI,sBAAX;QACH,CAFD,MAEO,IACHpF,SAAS,KAAK,MAAd,IACA,MAAI,CAAClD,KAAL,CAAWuI,qBAFR,EAGL;UACE,MAAI,CAACvI,KAAL,CAAWuI,qBAAX;QACH;MACJ,CATD;IAUH;;;+CAE0B;MACvB,KAAKzG,WAAL,CAAiB+E,QAAjB,CAA0B,CAA1B;;MAEA,KAAK5G,mBAAL;MACA,KAAKO,MAAL,GAAc,KAAd;MACA,KAAKR,KAAL,CAAWwI,aAAX,IAA4B,KAAKxI,KAAL,CAAWwI,aAAX,EAA5B;MAEA,KAAKxI,KAAL,CAAWyI,UAAX,IAAyB,KAAKzI,KAAL,CAAWyI,UAAX,EAAzB;MAEA,KAAK1H,aAAL,GAAqB,IAArB;MACA,KAAKD,2BAAL,GAAmC,KAAnC;IACH;;;qCAEgB8D,O,EAAS8D,c,EAAgB;MAAA;;MACtC3G,QAAQ,CAAC4G,MAAT,CAAgB,KAAK7G,WAArB,EAAkC;QAC9B8C,OAAO,EAAPA,OAD8B;QAE9BgE,QAAQ,EAAE,KAAK5I,KAAL,CAAW4I,QAFS;QAG9BC,OAAO,EAAE,KAAK7I,KAAL,CAAW6I,OAHU;QAI9BC,kBAAkB,EAAE,KAAK9I,KAAL,CAAW8I,kBAJD;QAK9BC,yBAAyB,EAAE,KAAK/I,KAAL,CAAW+I,yBALR;QAM9B9D,eAAe,EAAE,KAAKjF,KAAL,CAAWiF;MANE,CAAlC,EAOGa,KAPH,CAOS,YAAM;QACX,MAAI,CAAC7F,mBAAL;;QACA,IAAI2E,OAAO,KAAK,CAAhB,EAAmB;UACf,MAAI,CAACpE,MAAL,GAAc,KAAd;UACA,MAAI,CAACR,KAAL,CAAWwI,aAAX,IAA4B,MAAI,CAACxI,KAAL,CAAWwI,aAAX,EAA5B;QACH,CAHD,MAGO;UACH,MAAI,CAAChI,MAAL,GAAc,IAAd;UACA,MAAI,CAACR,KAAL,CAAWgJ,YAAX,IAA2B,MAAI,CAAChJ,KAAL,CAAWgJ,YAAX,CAAwBpE,OAAxB,CAA3B;QACH;;QACD,IAAI8D,cAAJ,EAAoB;UAChBA,cAAc;QACjB;MACJ,CAnBD;;MAqBA,IAAI9D,OAAO,KAAK,CAAhB,EAAmB;QACf,KAAK5E,KAAL,CAAWyI,UAAX,IAAyB,KAAKzI,KAAL,CAAWyI,UAAX,EAAzB;MACH,CAFD,MAEO;QACH,KAAKzI,KAAL,CAAWiJ,SAAX,IAAwB,KAAKjJ,KAAL,CAAWiJ,SAAX,CAAqBrE,OAArB,CAAxB;MACH;;MAGD,KAAK7D,aAAL,GAAqB,IAArB;MACA,KAAKD,2BAAL,GAAmC,KAAnC;IACH;;;2CAQsB;MACnB,IAAI,CAAC,KAAKd,KAAL,CAAW+F,eAAhB,EAAiC;QAC7B,OAAOvG,KAAK,CAAC0J,YAAN,CAAmB,KAAKlJ,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAnB,kCACA,KAAKN,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KADvB;UAEHS,mBAAmB,EAAE,KAAKU,KAAL,CAAWV,mBAF7B;UAGHC,oBAAoB,EAAE,KAAKS,KAAL,CAAWT,oBAH9B;UAIHU,eAAe,EAAE,KAAKD,KAAL,CAAWC,eAJzB;UAKHE,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBAL1B;UAMH6H,kBAAkB,EAAE,KAAKrH;QANtB,GAAP;MAQH;;MAGD,IAAMzB,OAAO,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAAvB,CAA6BK,OAA7C;;MAEA,IAAIA,OAAJ,EAAa;QACT,OAAOb,KAAK,CAAC0J,YAAN,CAAmB,KAAKlJ,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAnB,kCACA,KAAKN,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KADvB;UAEHK,OAAO,EAAE,KAAKD,eAFX;UAGHK,mBAAmB,EAAE,KAAKU,KAAL,CAAWV,mBAH7B;UAIHC,oBAAoB,EAAE,KAAKS,KAAL,CAAWT,oBAJ9B;UAKHU,eAAe,EAAE,KAAKD,KAAL,CAAWC,eALzB;UAMHE,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBAN1B;UAOH6H,kBAAkB,EAAE,KAAKrH;QAPtB,GAAP;MASH;;MAED,OACI,oBAAC,gBAAD;QACI,aAAa,EAAE,CADnB;QAEI,OAAO,EAAE,KAAK1B,eAFlB;QAGI,UAAU,EAAE,KAHhB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAKKZ,KAAK,CAAC0J,YAAN,CAAmB,KAAKlJ,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAnB,kCACM,KAAKN,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAD7B;QAEGS,mBAAmB,EAAE,KAAKU,KAAL,CAAWV,mBAFnC;QAGGC,oBAAoB,EAAE,KAAKS,KAAL,CAAWT,oBAHpC;QAIGU,eAAe,EAAE,KAAKD,KAAL,CAAWC,eAJ/B;QAKGE,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBALhC;QAMG6H,kBAAkB,EAAE,KAAKrH;MAN5B,GALL,CADJ;IAgBH;;;uCAEkB;MAAA;;MAGf,IAAI,KAAKX,KAAL,CAAWO,aAAf,EAA8B;QAC1B,OACI,oBAAC,QAAD,CAAU,IAAV;UACI,iBAAiB,EAAE,CAAC,YAAD;QADvB,GAEQ,KAAKO,aAAL,CAAmBmH,WAF3B;UAGI,KAAK,EAAE;YACHC,MAAM,EAAE,CADL;YAEHC,SAAS,EAAE,CAAC;cAAEvC,UAAU,EAAE,KAAKjF;YAAnB,CAAD;UAFR,CAHX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,IAQK,KAAKyH,oBAAL,EARL,CADJ;MAYH,CAbD,MAaO;QACH,OACI,oBAAC,QAAD,CAAU,IAAV;UACI,iBAAiB,EAAE,CAAC,YAAD;QADvB,GAEQ,KAAKtH,aAAL,CAAmBmH,WAF3B;UAGI,QAAQ,EAAE,kBAAA/G,CAAC;YAAA,OAAI,MAAI,CAACmH,eAAL,CAAqBnH,CAArB,CAAJ;UAAA,CAHf;UAII,KAAK,EAAE;YACHgH,MAAM,EAAE,CADL;YAEHC,SAAS,EAAE,CAAC;cAAEvC,UAAU,EAAE,KAAKjF;YAAnB,CAAD;UAFR,CAJX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,IASK,KAAKyH,oBAAL,EATL,CADJ;MAaH;IACJ;;;6BAEQ;MACL,OACI,oBAAC,IAAD;QACI,KAAK,EAAE,KAAKvJ,KAAL,CAAWyJ,KAAX,GAAmB,KAAKzJ,KAAL,CAAWyJ,KAA9B,GAAsCC,MAAM,CAACC,SADxD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAGI,oBAAC,IAAD;QACI,KAAK,EAAE,CACHD,MAAM,CAACE,MADJ,EAEH;UACIvE,MAAM,EAAE,KAAKlE,KAAL,CAAWQ,YADvB;UAEI+B,KAAK,EAAE,KAAKvC,KAAL,CAAWU;QAFtB,CAFG,CADX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GASKrC,KAAK,CAAC0J,YAAN,CAAmB,KAAKlJ,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAnB,kCACM,KAAKN,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAD7B;QAEGS,mBAAmB,EAAE,KAAKU,KAAL,CAAWV,mBAFnC;QAGGC,oBAAoB,EAAE,KAAKS,KAAL,CAAWT,oBAHpC;QAIGU,eAAe,EAAE,KAAKD,KAAL,CAAWC,eAJ/B;QAKGE,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBALhC;QAMG6H,kBAAkB,EAAE,KAAKrH;MAN5B,GATL,CAHJ,EAqBK,KAAK+H,gBAAL,EArBL,CADJ;IAyBH;;;6CA9d+BrF,S,EAAWsF,S,EAAW;MAClD,IAAI,CAACtF,SAAS,CAACgB,aAAf,EAA8B;QAC1BuE,aAAa,CAACD,SAAS,CAACtI,qBAAX,CAAb;QACAsI,SAAS,CAACtI,qBAAV,GAAkC,IAAlC;MACH;;MACDsI,SAAS,CAACrI,yBAAV,GACI+C,SAAS,CAACQ,eAAV,GAA4B,CAA5B,GACAR,SAAS,CAACqB,gBADV,GAEAjG,mBAFA,GAGA4E,SAAS,CAACwF,kBAJd;MAKA,OAAOF,SAAP;IACH;;;;EAzLkBrK,S;;AA+oBvB,IAAMiK,MAAM,GAAGO,UAAU,CAAC9H,MAAX,CAAkB;EAC7BwH,SAAS,EAAE,EADkB;EAK7BC,MAAM,EAAE;IACJP,MAAM,EAAE,CADJ;IAEJa,MAAM,EAAE,CAFJ;IAGJC,IAAI,EAAE,CAHF;IAIJC,QAAQ,EAAE,QAJN;IAKJC,QAAQ,EAAE,UALN;IAMJC,KAAK,EAAE,CANH;IAOJC,GAAG,EAAE;EAPD;AALqB,CAAlB,CAAf;AAgBAxK,QAAQ,CAACyK,SAAT,GAAqB;EAKjBrK,gBAAgB,EAAET,SAAS,CAAC+K,IALX;EASjBlE,iBAAiB,EAAE7G,SAAS,CAAC+K,IATZ;EAajB3D,iBAAiB,EAAEpH,SAAS,CAAC+K,IAbZ;EAkBjBxB,SAAS,EAAEvJ,SAAS,CAAC+K,IAlBJ;EAsBjBzB,YAAY,EAAEtJ,SAAS,CAAC+K,IAtBP;EA0BjB7C,aAAa,EAAElI,SAAS,CAACgL,MA1BR;EA8BjB/E,cAAc,EAAEjG,SAAS,CAACgL,MA9BT;EAkCjB1G,mBAAmB,EAAEtE,SAAS,CAACgL,MAlCd;EAsCjBrG,oBAAoB,EAAE3E,SAAS,CAACgL,MAtCf;EA0CjB5C,eAAe,EAAEpI,SAAS,CAACgL,MA1CV;EA8CjBvC,gBAAgB,EAAEzI,SAAS,CAACgL,MA9CX;EAkDjBrJ,sBAAsB,EAAE3B,SAAS,CAACiL,IAlDjB;EAsDjBpJ,uBAAuB,EAAE7B,SAAS,CAACiL,IAtDlB;EA0DjBhE,aAAa,EAAEjH,SAAS,CAACgL,MA1DR;EA8DjB9D,cAAc,EAAElH,SAAS,CAACgL,MA9DT;EAkEjB9B,QAAQ,EAAElJ,SAAS,CAACgL,MAlEH;EAsEjB7B,OAAO,EAAEnJ,SAAS,CAACgL,MAtEF;EA0EjB5B,kBAAkB,EAAEpJ,SAAS,CAACgL,MA1Eb;EA8EjB3B,yBAAyB,EAAErJ,SAAS,CAACgL,MA9EpB;EAkFjB3E,eAAe,EAAErG,SAAS,CAACiL,IAlFV;EAsFjBlE,gBAAgB,EAAE/G,SAAS,CAACiL,IAtFX;EA0FjBjE,iBAAiB,EAAEhH,SAAS,CAACiL,IA1FZ;EA8FjBzF,uBAAuB,EAAExF,SAAS,CAACiL,IA9FlB;EAkGjB/I,8BAA8B,EAAElC,SAAS,CAACiL,IAlGzB;EAsGjBlC,UAAU,EAAE/I,SAAS,CAAC+K,IAtGL;EA0GjBjC,aAAa,EAAE9I,SAAS,CAAC+K,IA1GR;EA8GjBpC,YAAY,EAAE3I,SAAS,CAAC+K,IA9GP;EAkHjBrC,aAAa,EAAE1I,SAAS,CAAC+K,IAlHR;EAsHjB1G,wBAAwB,EAAErE,SAAS,CAAC+K,IAtHnB;EA0HjBrG,yBAAyB,EAAE1E,SAAS,CAAC+K,IA1HpB;EA8HjBhB,KAAK,EAAE/J,SAAS,CAACkL,MA9HA;EAkIjBtF,OAAO,EAAE5F,SAAS,CAACiL,IAlIF;EAsIjB3F,eAAe,EAAEtF,SAAS,CAACgL,MAtIV;EA0IjBlF,aAAa,EAAE9F,SAAS,CAACiL,IA1IR;EA+IjBX,kBAAkB,EAAEtK,SAAS,CAACgL,MA/Ib;EAoJjBhF,gBAAgB,EAAEhG,SAAS,CAACgL,MApJX;EAwJjBxE,kCAAkC,EAAExG,SAAS,CAACgL,MAxJ7B;EA6JjB7C,kBAAkB,EAAEnI,SAAS,CAACgL,MA7Jb;EAmKjBvD,+BAA+B,EAAEzH,SAAS,CAACgL,MAnK1B;EAwKjB3C,mBAAmB,EAAErI,SAAS,CAACgL,MAxKd;EA4KjBhG,gBAAgB,EAAEhF,SAAS,CAAC+K,IA5KX;EAgLjBxH,kBAAkB,EAAEvD,SAAS,CAAC+K,IAhLb;EAoLjB5G,yBAAyB,EAAEnE,SAAS,CAACgL,MApLpB;EAwLjBnH,0BAA0B,EAAE7D,SAAS,CAACgL,MAxLrB;EA4LjB5G,kBAAkB,EAAEpE,SAAS,CAAC+K,IA5Lb;EAgMjB7G,mBAAmB,EAAElE,SAAS,CAAC+K,IAhMd;EAoMjBlC,qBAAqB,EAAE7I,SAAS,CAAC+K,IApMhB;EAwMjBnC,sBAAsB,EAAE5I,SAAS,CAAC+K,IAxMjB;EA4MjBxF,eAAe,EAAEvF,SAAS,CAACiL,IA5MV;EAgNjBrK,QAAQ,EAAEZ,SAAS,CAACmL,IAAV,CAAeC,UAhNR;EAoNjBxH,QAAQ,EAAE5D,SAAS,CAACqL;AApNH,CAArB;AAuNAhL,QAAQ,CAACiL,YAAT,GAAwB;EACpBpD,aAAa,EAAE,CADK;EAEpBjC,cAAc,EAAE,CAFI;EAGpBI,eAAe,EAAE,IAHG;EAIpBU,gBAAgB,EAAE,KAJE;EAKpBC,iBAAiB,EAAE,KALC;EAMpBxB,uBAAuB,EAAE,KANL;EAOpBtD,8BAA8B,EAAE,KAPZ;EAQpB0D,OAAO,EAAE,KARW;EASpBN,eAAe,EAAE,GATG;EAUpBa,gBAAgB,EAAElG,0BAVE;EAWpBuG,kCAAkC,EAAE,CAXhB;EAYpB2B,kBAAkB,EAAE,EAZA;EAapBV,+BAA+B,EAAE,CAbb;EAcpBY,mBAAmB,EAAE,EAdD;EAepBpD,IAAI,EAAE,EAfc;EAgBpBM,eAAe,EAAE,IAhBG;EAiBpBO,aAAa,EAAE,KAjBK;EAkBpBwE,kBAAkB,EAAE;AAlBA,CAAxB;AAqBA,eAAejK,QAAf"},"metadata":{},"sourceType":"module"}