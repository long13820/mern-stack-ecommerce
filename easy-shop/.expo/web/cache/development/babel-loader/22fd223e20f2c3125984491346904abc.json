{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport default function useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n          height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["height","width","Dimensions","React","onChange","window","setDimensions","d"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAKA,eAAe,SAAA,mBAAA,GAA+B;EAAA,sBACR,KAAK,CAAL,QAAA,CAAe,YAAM;IAAA,sBAErBE,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAFqB;IAAA,4CAE/CF,MAF+C;IAAA,IAE/CA,MAF+C,sCAEjD,CAFiD;IAAA,4CAEnCC,KAFmC;IAAA,IAEnCA,KAFmC,sCAE3B,CAF2B;;IAIvD,OAAO;MAAED,MAAF,EAAEA,MAAF;MAAUC,KAAAA,EAAAA;IAAV,CAAP;EAJF,CAAoC,CADQ;EAAA;EAAA,IACtC,UADsC;EAAA,IACtC,aADsC;;EAQ5CE,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAwC;MAAA,IAArCC,MAAqC,QAArCA,MAAqC;MAAA,IACjD,KADiD,GACvD,MADuD,CACjD,KADiD;MAAA,IACxCL,MADwC,GACvD,MADuD,CACxCA,MADwC;MAGvDM,aAAa,CAAEC,UAAAA,CAAD,EAAO;QACnB,IAAIN,KAAK,KAAKM,CAAC,CAAXN,KAAAA,IAAqBD,MAAM,KAAKO,CAAC,CAArC,MAAA,EAA8C;UAC5C,OAAA,CAAA;QACD;;QAED,OAAO;UAAEN,KAAF,EAAEA,KAAF;UAASD,MAAAA,EAAAA;QAAT,CAAP;MALFM,CAAa,CAAbA;IAJkB,CACpB;;IAcAF,QAAQ,CAAC;MAAEC,MAAM,EAAEH,UAAU,CAAVA,GAAAA,CAAAA,QAAAA;IAAV,CAAD,CAARE;IAEAF,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;IAEA,OAAO;MAAA,OAAMA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAb,QAAaA,CAAN;IAAA,CAAP;EAnBFC,CAAAA,EAAAA,EAAAA;EAsBA,OAAA,UAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}