{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport { NavigationHelpersContext, TabActions, useTheme } from '@react-navigation/native';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var pager = _ref.pager,\n      lazyPlaceholder = _ref.lazyPlaceholder,\n      _ref$tabBar = _ref.tabBar,\n      tabBar = _ref$tabBar === void 0 ? function (props) {\n    return React.createElement(MaterialTopTabBar, props);\n  } : _ref$tabBar,\n      tabBarOptions = _ref.tabBarOptions,\n      state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      rest = _objectWithoutProperties(_ref, [\"pager\", \"lazyPlaceholder\", \"tabBar\", \"tabBarOptions\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"]);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread(_objectSpread({}, tabBarOptions), props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderPager: pager,\n    renderLazyPlaceholder: lazyPlaceholder,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  })));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["tabBar","props","rest","colors","useTheme","renderTabBar","state","navigation","descriptors","index","TabActions","target","key","route","type","backgroundColor","background"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,OAAA,QAAA,uBAAA;AACA,SAAA,wBAAA,EAAA,UAAA,EAAA,QAAA,QAAA,0BAAA;AAQA,OAAA,iBAAA;AAeA,eAAe,SAAA,kBAAA,OAUL;EAAA,IAViC,KAUjC,QAViC,KAUjC;EAAA,IAViC,eAUjC,QAViC,eAUjC;EAAA,uBAPRA,MAOQ;EAAA,IAPRA,MAOQ,4BAPEC,UAAAA,KAAD;IAAA,OAAmC,KAAA,CAAA,aAAA,CAAA,iBAAA,EAHH,KAGG,CAAnC;EAAA,CAOD;EAAA,IAViC,aAUjC,QAViC,aAUjC;EAAA,IAViC,KAUjC,QAViC,KAUjC;EAAA,IAViC,UAUjC,QAViC,UAUjC;EAAA,IAViC,WAUjC,QAViC,WAUjC;EAAA,IAViC,mBAUjC,QAViC,mBAUjC;EAAA,IADLC,IACK;;EAAA,gBACWE,QAAnB,EADQ;EAAA,IACAD,MADA,aACAA,MADA;;EAGR,IAAME,YAAY,GAAIJ,SAAhBI,YAAgBJ,CAAAA,KAAD,EAA+B;IAClD,OAAOD,MAAM,+CAAC,aAAD,GAAC,KAAD;MAGXM,KAAK,EAHO,KAAD;MAIXC,UAAU,EAJE,UAAD;MAKXC,WAAW,EAAEA;IALF,GAAb;EADF,CAAA;;EAUA,OACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;IAAmC,KAAK,EAAED;EAA1C,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,aAAa,EAAGE,uBAAAA,KAAD;MAAA,OACb,UAAU,CAAV,QAAA,iCACKC,UAAU,CAAVA,MAAAA,CAAkBJ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EADH,IACfI,CADL;QAEEC,MAAM,EAAEL,KAAK,CAACM;MAFhB,GADa;IAAA,CAFjB;IAQE,WAAW,EAAE;MAAA,IAAGC,KAAH,SAAGA,KAAH;MAAA,OAAeL,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAR9B,MAQ8BA,EAAf;IAAA,CARf;IASE,eAAe,EATjB,KAAA;IAUE,YAAY,EAVd,YAAA;IAWE,WAAW,EAXb,KAAA;IAYE,qBAAqB,EAZvB,eAAA;IAaE,YAAY,EAAE;MAAA,OAAM,UAAU,CAAV,IAAA,CAAgB;QAAEM,IAAI,EAAE;MAAR,CAAhB,CAAN;IAAA,CAbhB;IAcE,UAAU,EAAE;MAAA,OAAM,UAAU,CAAV,IAAA,CAAgB;QAAEA,IAAI,EAAE;MAAR,CAAhB,CAAN;IAAA,CAdd;IAeE,mBAAmB,EAAE,CACnB;MAAEC,eAAe,EAAEZ,MAAM,CAACa;IAA1B,CADmB,EAAA,mBAAA;EAfvB,CAAA,CAAA,CADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}