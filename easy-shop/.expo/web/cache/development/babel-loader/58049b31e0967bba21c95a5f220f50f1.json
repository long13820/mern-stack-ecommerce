{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onSuccessfulTap = function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    };\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture = this.hammer.get(this.name);\n\n        if (_gesture.options.enable(_gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","onSuccessfulTap","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","maxDelayMs","event","taps","config","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","Tap"],"sources":["D:/GitHub/mern-stack-ecommerce/easy-shop/node_modules/react-native-gesture-handler/web/TapGestureHandler.js"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\r\nimport { isnan } from './utils';\r\n\r\nclass TapGestureHandler extends DiscreteGestureHandler {\r\n  get name() {\r\n    return 'tap';\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    return Hammer.Tap;\r\n  }\r\n\r\n  get maxDelayMs() {\r\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\r\n  }\r\n\r\n  simulateCancelEvent(inputData) {\r\n    if (this.isGestureRunning) {\r\n      this.cancelEvent(inputData);\r\n    }\r\n  }\r\n\r\n  onGestureActivated(ev) {\r\n    if (this.isGestureRunning) {\r\n      this.onSuccessfulTap(ev);\r\n    }\r\n  }\r\n\r\n  onSuccessfulTap = ev => {\r\n    if (this._getPendingGestures().length) {\r\n      this._shouldFireEndEvent = ev;\r\n      return;\r\n    }\r\n    if (ev.eventType === Hammer.INPUT_END) {\r\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\r\n    }\r\n    // When handler gets activated it will turn into State.END immediately.\r\n    this.sendEvent({ ...ev, isFinal: true });\r\n    this.onGestureEnded(ev);\r\n  };\r\n\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n\r\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\r\n    if (\r\n      !this.hasGestureFailed &&\r\n      !this.isGestureRunning &&\r\n      // Prevent multi-pointer events from misfiring.\r\n      !ev.isFinal\r\n    ) {\r\n      // Tap Gesture start event\r\n      const gesture = this.hammer.get(this.name);\r\n      if (gesture.options.enable(gesture, ev)) {\r\n        clearTimeout(this._multiTapTimer);\r\n\r\n        this.onStart(ev);\r\n        this.sendEvent(ev);\r\n      }\r\n    }\r\n    if (ev.isFinal && ev.maxPointers > 1) {\r\n      setTimeout(() => {\r\n        // Handle case where one finger presses slightly\r\n        // after the first finger on a multi-tap event\r\n        if (this.isGestureRunning) {\r\n          this.cancelEvent(ev);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.hasGestureFailed) {\r\n      return;\r\n    }\r\n    // Hammer doesn't send a `cancel` event for taps.\r\n    // Manually fail the event.\r\n    if (ev.isFinal) {\r\n      // Handle case where one finger presses slightly\r\n      // after the first finger on a multi-tap event\r\n      if (ev.maxPointers > 1) {\r\n        setTimeout(() => {\r\n          if (this.isGestureRunning) {\r\n            this.cancelEvent(ev);\r\n          }\r\n        });\r\n      }\r\n\r\n      // Clear last timer\r\n      clearTimeout(this._timer);\r\n      // Create time out for multi-taps.\r\n      this._timer = setTimeout(() => {\r\n        this.hasGestureFailed = true;\r\n        this.cancelEvent(ev);\r\n      }, this.maxDelayMs);\r\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\r\n      // Tap Gesture start event\r\n      const gesture = this.hammer.get(this.name);\r\n      if (gesture.options.enable(gesture, ev)) {\r\n        clearTimeout(this._multiTapTimer);\r\n\r\n        this.onStart(ev);\r\n        this.sendEvent(ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      ...super.getHammerConfig(),\r\n      event: this.name,\r\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\r\n      interval: this.maxDelayMs,\r\n      time:\r\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\r\n          ? 250\r\n          : this.config.maxDurationMs,\r\n    };\r\n  }\r\n\r\n  updateGestureConfig({\r\n    shouldCancelWhenOutside = true,\r\n    maxDeltaX = Number.NaN,\r\n    maxDeltaY = Number.NaN,\r\n    numberOfTaps = 1,\r\n    minDurationMs = 525,\r\n    maxDelayMs = Number.NaN,\r\n    maxDurationMs = Number.NaN,\r\n    maxDist = 2,\r\n    minPointers = 1,\r\n    maxPointers = 1,\r\n    ...props\r\n  }) {\r\n    return super.updateGestureConfig({\r\n      shouldCancelWhenOutside,\r\n      numberOfTaps,\r\n      maxDeltaX,\r\n      maxDeltaY,\r\n      minDurationMs,\r\n      maxDelayMs,\r\n      maxDist,\r\n      minPointers,\r\n      maxPointers,\r\n      ...props,\r\n    });\r\n  }\r\n\r\n  onGestureEnded(...props) {\r\n    clearTimeout(this._timer);\r\n    super.onGestureEnded(...props);\r\n  }\r\n\r\n  onWaitingEnded(gesture) {\r\n    if (this._shouldFireEndEvent) {\r\n      this.onSuccessfulTap(this._shouldFireEndEvent);\r\n      this._shouldFireEndEvent = null;\r\n    }\r\n  }\r\n}\r\nexport default TapGestureHandler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}