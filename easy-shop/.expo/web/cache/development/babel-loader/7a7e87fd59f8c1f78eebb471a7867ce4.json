{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\mern-stack-ecommerce\\\\easy-shop\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeListView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport SwipeRow from \"./SwipeRow\";\n\nvar SwipeListView = function (_PureComponent) {\n  _inherits(SwipeListView, _PureComponent);\n\n  var _super = _createSuper(SwipeListView);\n\n  function SwipeListView(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeListView);\n\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n\n    if (Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n\n    _this._onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n\n    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n\n      _this._onScroll = _this.props.onScroll;\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key, data) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key, data);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof SectionList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        } else if (this._listView instanceof Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n\n      if (typeof this.props.listViewRef === 'function') {\n        this.props.listViewRef && this.props.listViewRef(ref);\n      } else if (typeof this.props.listViewRef === 'object') {\n        if (Object.keys(this.props.listViewRef).includes('current')) {\n          this.props.listViewRef.current = ref;\n        }\n      }\n    }\n  }, {\n    key: \"closeAllOpenRows\",\n    value: function closeAllOpenRows() {\n      var _this2 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this2._rows[rowKey];\n\n        if (row) {\n          var rowTranslateX = Math.round(row.currentTranslateX || 0);\n\n          if (row.closeRow && rowTranslateX !== 0) {\n            row.closeRow();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"manuallyOpenAllRows\",\n    value: function manuallyOpenAllRows(toValue) {\n      var _this3 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this3._rows[rowKey];\n\n        if (row && row.manuallySwipeRow) {\n          row.manuallySwipeRow(toValue);\n        }\n      });\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this4 = this;\n\n      if (!HiddenComponent) {\n        return React.cloneElement(VisibleComponent, _objectSpread(_objectSpread({}, VisibleComponent.props), {}, {\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          }\n        }));\n      } else {\n        return React.createElement(SwipeRow, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this4.props.onSwipeValueChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress(key);\n          },\n          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,\n          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,\n          leftActionValue: item.leftActionValue || this.props.leftActionValue || 0,\n          rightActionValue: item.rightActionValue || this.props.rightActionValue || 0,\n          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,\n          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,\n          onLeftAction: function onLeftAction() {\n            return item.onLeftAction || _this4.props.onLeftAction && _this4.props.onLeftAction(key, _this4._rows);\n          },\n          onRightAction: function onRightAction() {\n            return item.onRightAction || _this4.props.onRightAction && _this4.props.onRightAction(key, _this4._rows);\n          },\n          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {\n            return _this4.props.onLeftActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {\n            return _this4.props.onRightActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this4.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }\n        }, HiddenComponent, VisibleComponent);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = \"\" + secId + rowId;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n          index = rowData.index;\n      var key = item.key;\n\n      if (!key && this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          useSectionList = _this$props.useSectionList,\n          renderListView = _this$props.renderListView,\n          props = _objectWithoutProperties(_this$props, [\"useSectionList\", \"renderListView\"]);\n\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? Animated.SectionList : SectionList;\n\n        return React.createElement(_ListComponent, _extends({}, props, this.listViewProps, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      var ListComponent = this.props.useAnimatedList ? Animated.FlatList : FlatList;\n      return React.createElement(ListComponent, _extends({}, props, this.listViewProps, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return SwipeListView;\n}(PureComponent);\n\nSwipeListView.propTypes = {\n  renderListView: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderHiddenItem: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  closeOnScroll: PropTypes.bool,\n  closeOnRowPress: PropTypes.bool,\n  closeOnRowBeginSwipe: PropTypes.bool,\n  closeOnRowOpen: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  onScrollEnabled: PropTypes.func,\n  onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  swipeRowStyle: PropTypes.object,\n  listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  previewRowKey: PropTypes.string,\n  previewFirstRow: PropTypes.bool,\n  previewRowIndex: PropTypes.number,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  useAnimatedList: PropTypes.bool,\n  keyExtractor: PropTypes.func\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nexport default SwipeListView;","map":{"version":3,"names":["React","PureComponent","PropTypes","SwipeRow","SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","e","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","data","swipeGestureEnded","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","SectionList","Animated","ref","listViewRef","Object","keys","includes","current","forEach","rowKey","row","rowTranslateX","Math","round","currentTranslateX","manuallySwipeRow","VisibleComponent","HiddenComponent","item","shouldPreviewRow","cloneElement","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","_","rowSwipeGestureEnded","onSwipeValueChange","leftActivationValue","rightActivationValue","leftActionValue","rightActionValue","initialLeftActionState","initialRightActionState","onLeftAction","onRightAction","onLeftActionStatusChange","onRightActionStatusChange","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","propTypes","func","number","bool","oneOfType","object","string","defaultProps"],"sources":["D:/GitHub/mern-stack-ecommerce/easy-shop/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"sourcesContent":["'use strict';\r\n\r\nimport React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated, FlatList, Platform, SectionList } from 'react-native';\r\n\r\nimport SwipeRow from './SwipeRow';\r\n\r\n/**\r\n * ListView that renders SwipeRows.\r\n */\r\nclass SwipeListView extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this._rows = {};\r\n        this.openCellKey = null;\r\n        this.listViewProps = {};\r\n        if (Platform.OS === 'ios') {\r\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\r\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\r\n            this.yScrollOffset = 0;\r\n            this.layoutHeight = 0;\r\n            this.listViewProps = {\r\n                onLayout: e => this.onLayout(e),\r\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\r\n            };\r\n        }\r\n        this._onScroll = this.onScroll.bind(this);\r\n        if (this.props.onScroll && typeof this.props.onScroll === 'object') {\r\n            // Animated.event\r\n            this.props.onScroll.__addListener(this._onScroll);\r\n            this._onScroll = this.props.onScroll;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.refreshing) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n    }\r\n\r\n    setScrollEnabled(enable) {\r\n        if (this.props.scrollEnabled === false) {\r\n            return;\r\n        }\r\n        // Due to multiple issues reported across different versions of RN\r\n        // We do this in the safest way possible...\r\n        if (this._listView && this._listView.setNativeProps) {\r\n            this._listView.setNativeProps({ scrollEnabled: enable });\r\n        } else if (this._listView && this._listView.getScrollResponder) {\r\n            const scrollResponder = this._listView.getScrollResponder();\r\n            scrollResponder.setNativeProps &&\r\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\r\n        }\r\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\r\n    }\r\n\r\n    safeCloseOpenRow() {\r\n        const rowRef = this._rows[this.openCellKey];\r\n        if (rowRef && rowRef.closeRow) {\r\n            this._rows[this.openCellKey].closeRow();\r\n        }\r\n    }\r\n\r\n    rowSwipeGestureBegan(key) {\r\n        if (\r\n            this.props.closeOnRowBeginSwipe &&\r\n            this.openCellKey &&\r\n            this.openCellKey !== key\r\n        ) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n\r\n        if (this.props.swipeGestureBegan) {\r\n            this.props.swipeGestureBegan(key);\r\n        }\r\n    }\r\n\r\n    rowSwipeGestureEnded(key, data) {\r\n        if (this.props.swipeGestureEnded) {\r\n            this.props.swipeGestureEnded(key, data);\r\n        }\r\n    }\r\n\r\n    onRowOpen(key, toValue) {\r\n        if (\r\n            this.openCellKey &&\r\n            this.openCellKey !== key &&\r\n            this.props.closeOnRowOpen &&\r\n            !this.props.closeOnRowBeginSwipe\r\n        ) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n        this.openCellKey = key;\r\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\r\n    }\r\n\r\n    onRowPress() {\r\n        if (this.openCellKey) {\r\n            if (this.props.closeOnRowPress) {\r\n                this.safeCloseOpenRow();\r\n                this.openCellKey = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    onScroll(e) {\r\n        if (Platform.OS === 'ios') {\r\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\r\n        }\r\n        if (this.openCellKey) {\r\n            if (this.props.closeOnScroll) {\r\n                this.safeCloseOpenRow();\r\n                this.openCellKey = null;\r\n            }\r\n        }\r\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\r\n    }\r\n\r\n    onLayout(e) {\r\n        this.layoutHeight = e.nativeEvent.layout.height;\r\n        this.props.onLayout && this.props.onLayout(e);\r\n    }\r\n\r\n    // When deleting rows on iOS, the list may end up being over-scrolled,\r\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\r\n    // when that happens, which will make sure the list is kept in bounds.\r\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\r\n    onContentSizeChange(w, h) {\r\n        const height = h - this.layoutHeight;\r\n        if (this.yScrollOffset >= height && height > 0) {\r\n            if (this._listView instanceof FlatList) {\r\n                this._listView && this._listView.scrollToEnd();\r\n            } else if (this._listView instanceof SectionList) {\r\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\r\n            } else if (this._listView instanceof Animated.FlatList) {\r\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\r\n            }\r\n        }\r\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\r\n    }\r\n\r\n    setRefs(ref) {\r\n        this._listView = ref;\r\n        if (typeof this.props.listViewRef === 'function') {\r\n            this.props.listViewRef && this.props.listViewRef(ref);\r\n        } else if (typeof this.props.listViewRef === 'object') {\r\n            if (Object.keys(this.props.listViewRef).includes('current')) {\r\n                this.props.listViewRef.current = ref;\r\n            }\r\n        }\r\n    }\r\n\r\n    closeAllOpenRows() {\r\n        Object.keys(this._rows).forEach(rowKey => {\r\n            const row = this._rows[rowKey];\r\n            if (row) {\r\n                const rowTranslateX = Math.round(row.currentTranslateX || 0);\r\n                if (row.closeRow && rowTranslateX !== 0) {\r\n                    row.closeRow();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyOpenAllRows(toValue) {\r\n        Object.keys(this._rows).forEach(rowKey => {\r\n            const row = this._rows[rowKey];\r\n            if (row && row.manuallySwipeRow) {\r\n                row.manuallySwipeRow(toValue);\r\n            }\r\n        });\r\n    }\r\n\r\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\r\n        if (!HiddenComponent) {\r\n            return React.cloneElement(VisibleComponent, {\r\n                ...VisibleComponent.props,\r\n                ref: row => (this._rows[key] = row),\r\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\r\n                onRowDidOpen: toValue =>\r\n                    this.props.onRowDidOpen &&\r\n                    this.props.onRowDidOpen(key, this._rows, toValue),\r\n                onRowClose: () =>\r\n                    this.props.onRowClose &&\r\n                    this.props.onRowClose(key, this._rows),\r\n                onRowDidClose: () =>\r\n                    this.props.onRowDidClose &&\r\n                    this.props.onRowDidClose(key, this._rows),\r\n                onRowPress: () => this.onRowPress(),\r\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\r\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\r\n                swipeGestureEnded: (_, data) =>\r\n                    this.rowSwipeGestureEnded(key, data),\r\n            });\r\n        } else {\r\n            return (\r\n                <SwipeRow\r\n                    onSwipeValueChange={\r\n                        this.props.onSwipeValueChange\r\n                            ? data =>\r\n                                  this.props.onSwipeValueChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    ref={row => (this._rows[key] = row)}\r\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\r\n                    swipeGestureEnded={(_, data) =>\r\n                        this.rowSwipeGestureEnded(key, data)\r\n                    }\r\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\r\n                    onRowDidOpen={toValue =>\r\n                        this.props.onRowDidOpen &&\r\n                        this.props.onRowDidOpen(key, this._rows, toValue)\r\n                    }\r\n                    onRowClose={() =>\r\n                        this.props.onRowClose &&\r\n                        this.props.onRowClose(key, this._rows)\r\n                    }\r\n                    onRowDidClose={() =>\r\n                        this.props.onRowDidClose &&\r\n                        this.props.onRowDidClose(key, this._rows)\r\n                    }\r\n                    onRowPress={() => this.onRowPress(key)}\r\n                    leftActivationValue={\r\n                        item.leftActivationValue ||\r\n                        this.props.leftActivationValue\r\n                    }\r\n                    rightActivationValue={\r\n                        item.rightActivationValue ||\r\n                        this.props.rightActivationValue\r\n                    }\r\n                    leftActionValue={\r\n                        item.leftActionValue || this.props.leftActionValue || 0\r\n                    }\r\n                    rightActionValue={\r\n                        item.rightActionValue || this.props.rightActionValue || 0\r\n                    }\r\n                    initialLeftActionState={\r\n                        item.initialLeftActionState ||\r\n                        this.props.initialLeftActionState\r\n                    }\r\n                    initialRightActionState={\r\n                        item.initialRightActionState ||\r\n                        this.props.initialRightActionState\r\n                    }\r\n                    onLeftAction={() =>\r\n                        item.onLeftAction ||\r\n                        (this.props.onLeftAction &&\r\n                            this.props.onLeftAction(key, this._rows))\r\n                    }\r\n                    onRightAction={() =>\r\n                        item.onRightAction ||\r\n                        (this.props.onRightAction &&\r\n                            this.props.onRightAction(key, this._rows))\r\n                    }\r\n                    onLeftActionStatusChange={\r\n                        this.props.onLeftActionStatusChange\r\n                            ? data =>\r\n                                  this.props.onLeftActionStatusChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    onRightActionStatusChange={\r\n                        this.props.onRightActionStatusChange\r\n                            ? data =>\r\n                                  this.props.onRightActionStatusChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    shouldItemUpdate={\r\n                        this.props.shouldItemUpdate\r\n                            ? (currentItem, newItem) =>\r\n                                  this.props.shouldItemUpdate(\r\n                                      currentItem,\r\n                                      newItem\r\n                                  )\r\n                            : null\r\n                    }\r\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\r\n                    leftOpenValue={\r\n                        item.leftOpenValue || this.props.leftOpenValue\r\n                    }\r\n                    rightOpenValue={\r\n                        item.rightOpenValue || this.props.rightOpenValue\r\n                    }\r\n                    closeOnRowPress={\r\n                        item.closeOnRowPress || this.props.closeOnRowPress\r\n                    }\r\n                    disableLeftSwipe={\r\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\r\n                    }\r\n                    disableRightSwipe={\r\n                        item.disableRightSwipe || this.props.disableRightSwipe\r\n                    }\r\n                    stopLeftSwipe={\r\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\r\n                    }\r\n                    stopRightSwipe={\r\n                        item.stopRightSwipe || this.props.stopRightSwipe\r\n                    }\r\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\r\n                    disableHiddenLayoutCalculation={\r\n                        this.props.disableHiddenLayoutCalculation\r\n                    }\r\n                    style={this.props.swipeRowStyle}\r\n                    preview={shouldPreviewRow}\r\n                    previewDuration={this.props.previewDuration}\r\n                    previewOpenDelay={this.props.previewOpenDelay}\r\n                    previewOpenValue={this.props.previewOpenValue}\r\n                    previewRepeat={this.props.previewRepeat}\r\n                    previewRepeatDelay={this.props.previewRepeatDelay}\r\n                    tension={this.props.tension}\r\n                    restSpeedThreshold={this.props.restSpeedThreshold}\r\n                    restDisplacementThreshold={\r\n                        this.props.restDisplacementThreshold\r\n                    }\r\n                    friction={this.props.friction}\r\n                    directionalDistanceChangeThreshold={\r\n                        this.props.directionalDistanceChangeThreshold\r\n                    }\r\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\r\n                    swipeToOpenVelocityContribution={\r\n                        this.props.swipeToOpenVelocityContribution\r\n                    }\r\n                    swipeToClosePercent={this.props.swipeToClosePercent}\r\n                    item={item} // used for should item update comparisons\r\n                    useNativeDriver={this.props.useNativeDriver}\r\n                >\r\n                    {HiddenComponent}\r\n                    {VisibleComponent}\r\n                </SwipeRow>\r\n            );\r\n        }\r\n    }\r\n\r\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\r\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\r\n    renderRow(rowData, secId, rowId, rowMap) {\r\n        const key = `${secId}${rowId}`;\r\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\r\n        const HiddenComponent =\r\n            this.props.renderHiddenRow &&\r\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\r\n        const previewRowId =\r\n            this.props.dataSource &&\r\n            this.props.dataSource.getRowIDForFlatIndex(\r\n                this.props.previewRowIndex || 0\r\n            );\r\n        const shouldPreviewRow =\r\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\r\n            rowId === previewRowId;\r\n\r\n        return this.renderCell(\r\n            Component,\r\n            HiddenComponent,\r\n            key,\r\n            rowData,\r\n            shouldPreviewRow\r\n        );\r\n    }\r\n\r\n    renderItem(rowData, rowMap) {\r\n        const Component = this.props.renderItem(rowData, rowMap);\r\n        const HiddenComponent =\r\n            this.props.renderHiddenItem &&\r\n            this.props.renderHiddenItem(rowData, rowMap);\r\n        const { item, index } = rowData;\r\n        let { key } = item;\r\n        if (!key && this.props.keyExtractor) {\r\n            key = this.props.keyExtractor(item, index);\r\n        }\r\n\r\n        const shouldPreviewRow =\r\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\r\n\r\n        return this.renderCell(\r\n            Component,\r\n            HiddenComponent,\r\n            key,\r\n            item,\r\n            shouldPreviewRow\r\n        );\r\n    }\r\n\r\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\r\n\r\n    _onRef = c => this.setRefs(c);\r\n\r\n    render() {\r\n        const { useSectionList, renderListView, ...props } = this.props;\r\n\r\n        if (renderListView) {\r\n            // Ideally renderRow should be deprecated. We do this check for\r\n            // legacy purposes to not break certain renderListView cases\r\n            const useRenderRow = !!this.props.renderRow;\r\n            return renderListView(\r\n                props,\r\n                this.setRefs.bind(this),\r\n                this.onScroll.bind(this),\r\n                useRenderRow\r\n                    ? this.renderRow.bind(this, this._rows)\r\n                    : this.renderItem.bind(this)\r\n            );\r\n        }\r\n\r\n        if (useSectionList) {\r\n            const ListComponent = this.props.useAnimatedList\r\n                ? Animated.SectionList\r\n                : SectionList;\r\n            return (\r\n                <ListComponent\r\n                    {...props}\r\n                    {...this.listViewProps}\r\n                    ref={this._onRef}\r\n                    onScroll={this._onScroll}\r\n                    renderItem={this._renderItem}\r\n                />\r\n            );\r\n        }\r\n        const ListComponent = this.props.useAnimatedList\r\n            ? Animated.FlatList\r\n            : FlatList;\r\n        return (\r\n            <ListComponent\r\n                {...props}\r\n                {...this.listViewProps}\r\n                ref={this._onRef}\r\n                onScroll={this._onScroll}\r\n                renderItem={this._renderItem}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nSwipeListView.propTypes = {\r\n    /**\r\n     * To render a custom ListView component, if you don't want to use ReactNative one.\r\n     * Note: This will call `renderRow`, not `renderItem`\r\n     */\r\n    renderListView: PropTypes.func,\r\n    /**\r\n     * How to render a row in a FlatList. Should return a valid React Element.\r\n     */\r\n    renderItem: PropTypes.func,\r\n    /**\r\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\r\n     * This is required unless renderItem is passing a SwipeRow.\r\n     */\r\n    renderHiddenItem: PropTypes.func,\r\n    /**\r\n     * TranslateX value for opening the row to the left (positive number)\r\n     */\r\n    leftOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for opening the row to the right (negative number)\r\n     */\r\n    rightOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\r\n     */\r\n    leftActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onRightActionStatusChange (negative number)\r\n     */\r\n    rightActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for left action to which the row will be shifted after gesture release\r\n     */\r\n    leftActionValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for right action to which the row will be shifted after gesture release\r\n     */\r\n    rightActionValue: PropTypes.number,\r\n    /**\r\n     * Initial value for left action state (default is false)\r\n     */\r\n    initialLeftActionState: PropTypes.bool,\r\n    /**\r\n     * Initial value for right action state (default is false)\r\n     */\r\n    initialRightActionState: PropTypes.bool,\r\n    /**\r\n     * TranslateX value for stop the row to the left (positive number)\r\n     */\r\n    stopLeftSwipe: PropTypes.number,\r\n    /**\r\n     * TranslateX value for stop the row to the right (negative number)\r\n     */\r\n    stopRightSwipe: PropTypes.number,\r\n    /**\r\n     * Should open rows be closed when the listView begins scrolling\r\n     */\r\n    closeOnScroll: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when a row is pressed\r\n     */\r\n    closeOnRowPress: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when a row begins to swipe open\r\n     */\r\n    closeOnRowBeginSwipe: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when another row is opened\r\n     */\r\n    closeOnRowOpen: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe rows left\r\n     */\r\n    disableLeftSwipe: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe rows right\r\n     */\r\n    disableRightSwipe: PropTypes.bool,\r\n    /**\r\n     * Enable hidden row onLayout calculations to run always.\r\n     *\r\n     * By default, hidden row size calculations are only done on the first onLayout event\r\n     * for performance reasons.\r\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\r\n     * You may want to do this if your rows' sizes can change.\r\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\r\n     */\r\n    recalculateHiddenLayout: PropTypes.bool,\r\n    /**\r\n     * Disable hidden row onLayout calculations\r\n     *\r\n     * Instead, {width: '100%', height: '100%'} will be used.\r\n     * Improves performance by avoiding component updates, while still working with orientation changes.\r\n     */\r\n    disableHiddenLayoutCalculation: PropTypes.bool,\r\n    /**\r\n     * Called when a swipe row is animating swipe\r\n     */\r\n    swipeGestureBegan: PropTypes.func,\r\n    /**\r\n     * Called when user has ended their swipe gesture\r\n     */\r\n    swipeGestureEnded: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating open\r\n     */\r\n    onRowOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated open\r\n     */\r\n    onRowDidOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating closed\r\n     */\r\n    onRowClose: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated closed\r\n     */\r\n    onRowDidClose: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to leftActivationValue\r\n     */\r\n    onLeftAction: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to rightActivationValue\r\n     */\r\n    onRightAction: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the leftActivationValue\r\n     */\r\n    onLeftActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the rightActivationValue\r\n     */\r\n    onRightActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called when scrolling on the SwipeListView has been enabled/disabled\r\n     */\r\n    onScrollEnabled: PropTypes.func,\r\n    /**\r\n     * Called when a scroll event is emitted\r\n     */\r\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    /**\r\n     * Styles for the parent wrapper View of the SwipeRow\r\n     */\r\n    swipeRowStyle: PropTypes.object,\r\n    /**\r\n     * Called when the FlatList ref is set and passes a ref to the FlatList\r\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\r\n     */\r\n    listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    /**\r\n     * Should the row with this key do a slide out preview to show that the list is swipeable\r\n     */\r\n    previewRowKey: PropTypes.string,\r\n    /**\r\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\r\n     */\r\n    previewFirstRow: PropTypes.bool,\r\n    /**\r\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\r\n     * Note: This ID will be passed to this function to get the correct row index\r\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\r\n     */\r\n    previewRowIndex: PropTypes.number,\r\n    /**\r\n     * Duration of the slide out preview animation (milliseconds)\r\n     */\r\n    previewDuration: PropTypes.number,\r\n    /**\r\n     * Should the animation repeat until false is provided\r\n     */\r\n    previewRepeat: PropTypes.bool,\r\n    /**\r\n     * Time between each full completed animation in milliseconds\r\n     * Default: 1000 (1 second)\r\n     */\r\n    previewRepeatDelay: PropTypes.number,\r\n    /**\r\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\r\n     */\r\n    previewOpenDelay: PropTypes.number,\r\n    /**\r\n     * TranslateX value for the slide out preview animation\r\n     * Default: 0.5 * props.rightOpenValue\r\n     */\r\n    previewOpenValue: PropTypes.number,\r\n    /**\r\n     * Friction for the open / close animation\r\n     */\r\n    friction: PropTypes.number,\r\n    /**\r\n     * Tension for the open / close animation\r\n     */\r\n    tension: PropTypes.number,\r\n    /**\r\n     * RestSpeedThreshold for the open / close animation\r\n     */\r\n    restSpeedThreshold: PropTypes.number,\r\n    /**\r\n     * RestDisplacementThreshold for the open / close animation\r\n     */\r\n    restDisplacementThreshold: PropTypes.number,\r\n    /**\r\n     * The dx value used to detect when a user has begun a swipe gesture\r\n     */\r\n    directionalDistanceChangeThreshold: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row opening.\r\n     */\r\n    swipeToOpenPercent: PropTypes.number,\r\n    /**\r\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\r\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\r\n     * and it'll just take into consideration the swipeToOpenPercent.\r\n     */\r\n    swipeToOpenVelocityContribution: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row closing.\r\n     */\r\n    swipeToClosePercent: PropTypes.number,\r\n    /**\r\n     * callback to determine whether component should update (currentItem, newItem)\r\n     */\r\n    shouldItemUpdate: PropTypes.func,\r\n    /**\r\n     * Callback invoked any time the swipe value of a SwipeRow is changed\r\n     */\r\n    onSwipeValueChange: PropTypes.func,\r\n    /**\r\n     * useNativeDriver: true for all animations where possible\r\n     */\r\n    useNativeDriver: PropTypes.bool,\r\n    /**\r\n     * Use Animated.Flatlist or Animated.Sectionlist\r\n     */\r\n    useAnimatedList: PropTypes.bool,\r\n    /**\r\n     * keyExtractor: function to generate key value for each row in the list\r\n     */\r\n    keyExtractor: PropTypes.func,\r\n};\r\n\r\nSwipeListView.defaultProps = {\r\n    leftOpenValue: 0,\r\n    rightOpenValue: 0,\r\n    closeOnRowBeginSwipe: false,\r\n    closeOnScroll: true,\r\n    closeOnRowPress: true,\r\n    closeOnRowOpen: true,\r\n    disableLeftSwipe: false,\r\n    disableRightSwipe: false,\r\n    recalculateHiddenLayout: false,\r\n    disableHiddenLayoutCalculation: false,\r\n    previewFirstRow: false,\r\n    directionalDistanceChangeThreshold: 2,\r\n    swipeToOpenPercent: 50,\r\n    swipeToOpenVelocityContribution: 0,\r\n    swipeToClosePercent: 50,\r\n    useNativeDriver: true,\r\n    previewRepeat: false,\r\n    previewRepeatDelay: 1000,\r\n    useAnimatedList: false,\r\n};\r\n\r\nexport default SwipeListView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}